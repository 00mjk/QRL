from unittest import TestCase

import simplejson as json
from mock import Mock
from pyqrllib.pyqrllib import bin2hstr

from qrl.core.misc import logger
from qrl.core.BlockHeader import BlockHeader
from qrl.core.Transaction import Transaction, TransferTransaction, StakeTransaction, CoinBase, Vote, TokenTransaction, TransferTokenTransaction
from qrl.crypto.misc import sha256
from qrl.crypto.xmss import XMSS
from qrl.generated import qrl_pb2

logger.initialize_default()

test_json_Simple = """{
  "type": "TRANSFER",
  "addrFrom": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
  "fee": "1",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transactionHash": "sTAdNZQIP4PEE90Kyr2NWQEkBU9QV5hFSFVv4UEY9xQ=",
  "transfer": {
    "addrTo": "UWZkNWQ2NDQ1NTkwM2I4ZTUwMGExNGNhZmIxYzRlYTk1YTFmOTc1NjJhYWFhMjRkODNlNWI5ZGMzODYxYTQ3Mzg2Y2U5YWQxNQ==",
    "amount": "100"
  }
}"""

test_json_Stake = """{
  "type": "STAKE",
  "addrFrom": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transactionHash": "zsgkQV5T6NxYlI8k/6uGQ2yaiQ41bHfcEIRhHN/sINE=",
  "stake": {
    "activationBlocknumber": "2",
    "slavePK": "OAeT3r+PcucO9zUe5QBd9sfKIyD/SeDq0MQLGce7HMFJbhmkgsBjUL3AVOTtUqJOyMmUxE+TQdARkKgasJOt6A==",
    "hash": "H5NgPbU7+tXJI5D3NdDLuGF7SrghSukcVmSj0emwCcg="
  }
}"""

test_json_CoinBase = """{
  "type": "COINBASE",
  "addrFrom": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transactionHash": "DWYx7I190yjGMJWI4k21+l1BGlDVOtYi9O1InH+racg=",
  "coinbase": {
    "addrTo": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
    "amount": "90",
    "blockNumber": "1",
    "headerhash": "cbyk7G3tHwuys91Ox27qL/Y/kPtS8AG7vvGx1bntChk="
  }
}"""

test_json_Vote = """{
  "type": "VOTE",
  "addrFrom": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transactionHash": "LlUkRnUJbYidP6hPWA5Rt+7U7ddy+++Ppz5HgWSild4=",
  "vote": {
    "blockNumber": "10",
    "hashHeader": "cbyk7G3tHwuys91Ox27qL/Y/kPtS8AG7vvGx1bntChk="
  }
}"""

test_json_Token = """{
  "type": "TOKEN",
  "addrFrom": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
  "fee": "1",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transactionHash": "BvnSopmxt0LjCTWq0f9ARO14Ta/mELW6MHoSZ6s/UCo=",
  "token": {
    "symbol": "UVJM",
    "name": "UXVhbnR1bSBSZXNpc3RhbnQgTGVkZ2Vy",
    "owner": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
    "decimals": "4",
    "initialBalances": [
      {
        "address": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
        "amount": "400000000"
      },
      {
        "address": "UWZkNWQ2NDQ1NTkwM2I4ZTUwMGExNGNhZmIxYzRlYTk1YTFmOTc1NjJhYWFhMjRkODNlNWI5ZGMzODYxYTQ3Mzg2Y2U5YWQxNQ==",
        "amount": "200000000"
      }
    ]
  }
}"""

test_json_TransferToken = """{
  "type": "TRANSFERTOKEN",
  "addrFrom": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
  "fee": "1",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transactionHash": "XKeau/getFoBltjJT4rS6Uo/xwF0W5Ghuz9VkCTuB4E=",
  "transferToken": {
    "tokenTxhash": "MDAwMDAwMDAwMDAwMDAw",
    "addrTo": "UWZkNWQ2NDQ1NTkwM2I4ZTUwMGExNGNhZmIxYzRlYTk1YTFmOTc1NjJhYWFhMjRkODNlNWI5ZGMzODYxYTQ3Mzg2Y2U5YWQxNQ==",
    "amount": "200000"
  }
}"""

test_signature_Simple = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\x93#\xbb2\xca\x19\xa4!\xc5d\x90\xc8'
 b'u\xc9\xe6\xa9\xc6\xe2\xf3\xdc\x8f\xd9\x18\xf8W0\xd8\x02\xb5\x98\x1fh'
 b'V&\x90\x95\x0f\xd6\xc1\xa1\xdb\x05\xaeo3\x1e\xbbLF=\x99\xb0|\xa2_"'
 b'\x11\xb8\x9ea\x95\xb0`\x05V\\B\xf5\xb0;CiO\x8dk\x11or\xcd\x03\x0fP\xd3\\'
 b'\xea<\x83\xbaw4\xf7B\xe4\x82\x8eA\xb1\xd1Ty,\xcdf\x0c$\x01VA\x8d\xcb\xe8\xa8'
 b'}\x01&\x16\xa4Y`i#/\xf1\xba\x18\x9c\xa0\x91\xc3Fi\x80G\xb8\xab\x99\xd5d\t;'
 b'\x0b\xbc\x91n\t<\x99Q\x00\xabbT\xb0/\xcb\xff\xd0o\xcd\xc1\xee`+gnJ[\x02'
 b'\xac\x1f\xd9t2\x07\x914\xe1\xc1\x943\xb6\xaa\x00%\x87\xf6\x0c\x8c'
 b'\xfd\x91\xaat\x97\xc7\xcc]\x83\x04\xae\x8c\xae3gE/\xd6\x81 Pz\xde\x0e'
 b'\x05\x7fX\x9bv\xaa\xc9\xa1\x07Z\x87d\x88\x83a\x82O\x04\xddS\x80m\t\xf3'
 b's\xf9e~\x8f\x13a~d\x15\xf9\xf7F\xe8M\xf9c\x0f\xec\xe3\xfc\tV\x0e\x18\xd8aj'
 b'K\xcb\x07\x1d\xe3\xe0\xcb\xd5\xcf\xf6)\x9dh\xc6\xc5\xbb\xc8\xab}E7>\x99\x13'
 b'd\xd7\x0f\x8a\xef\xaa\x94\x88\x04N\xac w\xcdC\xd2\xb2\xf2\\~pN\xc6\x1e'
 b'\x03Jl\xbb\xbb]\xd7\x0b\x89\x1do\\<\x9a\xf8\x89\x13\xa2s(\xbfR\xee\x0c'
 b"\xe7K\x1e\x90\xcb\xc5\x17\x15\xffD\xc8\xaaS'\xc5\xa3w\xe5\xdcF#QR\xff"
 b'?9\xc5\x1f\x91 \x0e\xf1?\x10\xf4\x03C\xce\x0e\xf5\xb5bK\x963\xa8\x1c\xa8'
 b'\xe08\xbf\xbb\x17\x07\xbf;js\xca\xd7\xf16+\xc7\x99\x1c\x8f\xb8\xe93\xf2\xe5'
 b'\x16?YD\x7f\xceX\xf4\x19t\x9bR\xcba\xab1\t\xf9\xdf\xac\x83\x1f"a'
 b'\xe9\xf3_\x90\xe9-\xe9c\xf1\xa5\x0c\x14\xb1\xbfK\xa2\xbe0brn\x1f\x07\x90'
 b'\xf7\xe4*\xea\xfc\x92>\xc3d\xb6\x0cS~\x17T\\\x9c \xef\x0c\xa7{\xcd\xf3'
 b'\x07\xba\xe5\x1a\xbfb\xab\xad\xd1R\xdaN\xea\x08\n\xf1\x7f\x11\x90\xed'
 b'\x1d\xcaeBxi\x08Q\x8aD\x97\x1a\x1a\xe0$#\xd4/\xf4~D\x8d\x94b\r\xb6\r\xc5'
 b'zo\xd9C\xe5\x83\x8f\x9b\xfaM\xf9\xd9}\x8f\xcaR\xb1\x99\x86\x97\xd1\xc3\t\xe7'
 b'\xfb\xda\xb3\xc4\x02\xb5s\x90K\x12\x9e\xe9$\x98n\xdaJ\r\x00\x9f]ph\x80'
 b'\xb7a({\x14\xce\xdb*\xb1\xe3\xc5\x92\x82\xff.\xf5\xf1Wxr\xff\x9ej\xb6'
 b'\xb9\x03\xe6w`\xcd\xb0\xe3\xb5\xda\x80\x10n\xfc\xaa\x1c|\x8bg\x9bx\x01$\xfd'
 b'F\x9b+i\xef\x8fo>\x91\xc2\xa9v\xe0\x8c\xc9\xd9\n\xfc\xf3\xed-q\x9a\x9a'
 b'\x94\xdc*\xcc\xcfX8[\x90e\xc3\xa1\xab\xe2\x84\xaf\xc8\xc9{\xea\x93\xf0\x83z'
 b'\xaf\xcd\x89\x10\x95\x05\xdc\x82\xfa\xbb\xb2\xd3L1)|\xb65\xc5\x00'
 b'\x8f\xea\x1e_e@\xde&x[\xf30Bf\x95\xbd:\xcb\x08}G\xc6\x968\xa8e\x18\xa1'
 b'r\xd6\x13\xaa$\xed\xcd\xb1\xc5\x00\xb5\xd1\xc2\xf1Z\xad\xac\xed*\x08'
 b'\xa2\x01\xf5\x84\t\xc5\x8a\xc3\r\xf8\x9e\xb1\x1d\x1eE0\xd9L\t\x15'
 b'\xeb\xd4\r\xe7f\xd2\xb7\xd4\xf8%[T\xdf\xc2\x9d\xa7 \xd6\xf9K`\xe0\x0b\xd0'
 b'J\xe2\x92\xec \xe7\x8d\xb1\xa0\x06\x0c\r!]kn|;r\\\xd7Sw!r\xd0\x00")Y\x08\x9d'
 b'\x02Qj\xa9\xa9l\xd7\xd0\xc61\x83\xe0\xe1((\x03\xfa\x06\xa3\xd5\xb9\x80oq'
 b' hf\x08\xd7\xe1\x878y\x13\xf6\xa9\xb3z\xdf\xb6L\xff\xff\x9e\xa1\x88PF'
 b'\xb4\x05\x84\x85\xf0\x0eel\x84\xa6nE\x1bu\xd8\xeb\x13\xf5\x80\xd5\xd02QO'
 b"\x7fm$\xads\x9e\x04_\xfd\xc9'\xc5\xfbZ\x02;\xc1\xd0\td\xf1\xa9\xa3O"
 b'G\x80\x11t\xc8]\x80\x9c\xf9\xf7\xd2P\xe2\xbb\xf1:\x07\xad\xd1\xb3\x88\xbeK\n'
 b'Q>\\t\x07\xcf\xc3\x83Rw]@\xcbz2\xeb\xc6\x1bN;!\xcb\xacn\x8e\xb7\x11\x15'
 b'\xbe9\x80$@\xdb\xbc\xbau\xb8@\xde|#a\xe4=\xa8\x04\x13\x81\xba\xd9h'
 b'B\xea\x8a\x93j\x06\xaa8\x83\x01v\xfbL@\x9f\xc1\x83D\\\xf6b\xbfN~ B\x02?'
 b'\x98H~\x15AK\x10\xa7M\xce,E\xceRN&\x03\x8a\xed\t}\xba{`\x159\\\xed\xf1EM\xd8'
 b'u\xf7\\(j\xe0\x02\x87-:G)\xe9l\xec\x15\x9c\x91\xf6\xa4\r\x11"J\x19H\x8ei'
 b'\xdb\x87L\x8b\x91\xfa(\x01\xcb\x8b\xa95\xa6\xc6\xb5\xd9\xbai\xad9\xf1dN\xf4'
 b'\x8dkE\x18\xaf\xdb\xad\x94>\x06.\x0c\x81\x9a\x92j\x86\x94^\xbaCe\xb5\x17'
 b'\xe6\x10&;\xdc$\x87\x82\xc6\xc0\x08\xb8\xf62\xe5\xbf!\xda/\xe2'
 b'\x93\x0f\x87\x12s\xca\xb5f?\x94C\x13\xd9b\xa0C\xa8\xfa\xda\x17\x7f\x16C\xa6'
 b'\x99\xcc\xf6\xa2\xf9?\x11\xcb\xc9\xb5\x8a\xac\x803\x9a\xcb\xc0T\xbf\xc6'
 b'\xf9\xb5\xcaO\xa9s\xd7P\x0b\x81\xf7\x8d6\x1e\x1a\xc6\x9a\x8b"\x89'
 b'R\xde\x8f\xd6p\x99\x97\xcbt|\xc9\x9b\xb7:\xed\xd86p\x89l\x91\x08\x8c\xa2'
 b'\x06\x11\x83\x90|\x195\xf4\xa1\xfc\xe5\r\xfd\xe2\x1f\xf3\xdc\t&\xf9"W\x88%'
 b'\x84\x94\xecL&%\xca!\xbd\xe4q2\xc7]\x84d\xd5\xf2\x80^Nv6D\t\x18\xde_'
 b"\xf5;\xf5Wkj\x17,\xc0'\xd3\xe7\xd9\xe7a\xc5\x11\xea\xbdA\xb9\xdd\xa9^"
 b'\xd9\x07\xb1l\xda\xe7\x9b\xd7\xf6\xf4\xd8\xdf\xb5g\xff\xc0\xa6\xc7yV'
 b'iY\xc9\xdb\xe9\xa7\x17\xe2\xe6\xa1\xfa\x9bX\x8d\xc8\xdb^+\x7f\xac'
 b'\xad\xea\x82V&\xa0Y\xcdh\xbf\x8c\xeb\xa8\xba[SK\x18!\xbb,\x96p\xdaC\xe9\xdbU'
 b'\x9a\x94\xde\x8d\xca\x18j\x82\xceh\xd5\xb1\x8f\x03+Z\xd3>s\x03\xc3\x11\tA'
 b'\x8ew\xd93l\x0f\xcd\x13\xf57\xf7\xa8\x05`]\xae\x1e1Y\xba\xc9\xf2\n\xa9'
 b'\xc4@\x9b\xe4\xd9\xe9c\x11\x1e<\xb9\xf4H\xd9,&\x0b&\xacN(Dg\x91\x16,\x9az'
 b'\xf5\xbc\xef\x94\x81\x98u\x04\xe4|e\x94\x0f\x96\xf9\xc4=\tO\xc2\x01\xeeF@'
 b'l\x10\x02\xa7\xfb\xd2\xe2I\x0c\xba&\xb4\xe0:\xd3\x9a\xe9\xff|\x99Q\xdaM3=,M~'
 b'\xa8IO=\x7f\x01\x08W\x95\x9c\xa4K\xfc/s\x13~e\xf6\xb5\xd4\xbfw\xbfI \xfc\x9d'
 b'\xcbT}4\x92\x15gX\x044Zk\x10\xc3\xbeu\xe6\xf6.Yj\xf4\x1a/\xb1\xa9\xfd\xa3'
 b'\xea\xfcF\xc9\x0e\xbd%\xb4e\xf2\xee\xb1\xfa\xf2\t7U%N\x04V\xf3Z\xdd'
 b"\xa1\xf8\x05=\xda\x14\xa8\x19N'\x97\xc4K \x7f\xb0F\x8c'|\x12f\xccX"
 b'\xbb\xee\x1d\x83\xdbu<\xf0C@\xe1A\xbb\xf6q`\xe0\xff\x8b\xbd\xf6M1Q\x12#\xd9;'
 b'Y\xc6\x9f#[l\xbew\xc2\x80:\xa6\x88\x08\xfa\x04\xa6,]\xcf\xa1\xc0J\xe4\xf4o2a'
 b'\x1b\xe1R\x01h8+\xeb\xf6p\xe8\xd0E\x05\xc9w&^0\tx\xff~\xab\x98\xf0\x85u'
 b'u\xd9\x89\xb4\xf6\x8e\xa7\\\xde\xdb$\xec\x14i[\x88\x06Qt\xc6\x00\x1e\x99\xe1'
 b"_c\x14\x00\x81\xc2.\x9d\x8b\x98'0\xaed\xa7~]{I\x02\x11\xab\xb1\x1a/\xafc\x03"
 b'\xe1\xb0}\xf1y\xa4\x1dcg\xd3\xacsi\x99\xf1<K\xbc\xd3p)Bz\xd8s\xe1\x01\xfd'
 b'\xc0nH\xb7\xa0\x7f\x7fC`%\xd5\xb5A\x9b\x13\xd1m\xa3\x98\x7f\xc6\x1ab\xa5'
 b'0\xc1\xe4)\xeb\x1a\x96\x8c\xf7\xf1\xd3\x15\x87<\xab\x1b\x10\x82\x1e\x04'
 b'M\xc1\xe2<\xea\xbb\\\xef\xe5*\n/P\xb1\xa4x\x1a\xad\x19\x87\xbf\xe4\xf9q'
 b'E\xf5&\x1b\x11\xa1\xe8\xf8\xdb<\x9fG~\x99z\xcaB\x1fU\xb0\xc2GR\xdf'
 b'(\x16\x9a\x10\xdcz\xe2\x990\x14\xaf\x1e\xf7\xc8jk\xd8\xba\x96\x86Vv?\xdb'
 b'i?\xbb\xb1\x83\x06\xf3\x82\xbb\xb8\xb7"\x9b\xde\x8b\xf7y\x1b\xfb\xf6'
 b'\xa9::\xf2\xbe\x7f=\xf6h\x975\x99\xee\x81\xaa\x0e\x1a\xc2\xd1\xdd\xabD0~'
 b'\xa0[A\xb0$\x8e\x88\xf0\x8a\x97\x19(\x07o5\x8a\xaa\xaf\xe77\x05|Du'
 b'A\xb4\x94\xb1\xbd!F8w]r\xcf&\xea\xe5.\xbd\x97j\xa5\xad}\x13\xcc;\x19\xd2\x1f'
 b'\x1e\t/u;<\xee\xcd\x9e\xa0\xd7\xd6\x98\x97\xe7.\x17\x1b\xe0\x0c\xc3M\xff.'
 b'\xb7\x84\x0c,~\x96\x13\xad\xc2\xee\xe1dlq\xf8z$\xd8H\xd0\xa0\xbeQ\xc8'
 b'\xca`D\xff}K\xad*\xa6\x98o\r(\xa425\xb1ac\x05\x88\xc0%\xd5\xa9;\x10I'
 b'\xb7\xcf\xae\x97\x85\x95\xf8\x1e\xd1\x91\xfbzU\x05\x95t\xbf\xfc8\xad'
 b'\x9b3\xe3\xa1\xe4Z~5C\xd2f\x83\x8cD\xea\x07,q`{=\xd7\xeb6\xe8\x81\xaa\xb6'
 b'\xd03\xa7\xcc\xc3\xb6h\xe9j\xcc\xcd\x04wJ\xa0\xf1\xc0\xcea#\xddB\xc5>h\xd2v0'
 b'\xaa*\x08i\x00`G\xf0d\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t\xf6fP\xdd'
 b'\xd7j\x86\x03\x18)/\x87\tWVs\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+-'
 b' $\x16\x1b>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c'
 b'!\xeb\x81L\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e'
 b'\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_Stake = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\xb2\xb5\xf1\xf7{\xf92\'\xbb\xdb\np'
 b'\x10\x11\xbb\xa0\xef\x18K\xc1\x16\x88\xed\xae\x88\x90\xe6\xfb\x8e=\xdbw'
 b'\xc2\x82\x83_\xc6\t`\xa6\x07\xdb\xfd\x00W\xcb\x83\xec\xec_]\x92'
 b'\x17\x90\x85\x07\xbf3(\x7f#\x14w\xb9\x01>X(\x11\xd41\t\xd2X\x0e\xca/4\xe3c'
 b'\x99q\x1f0\xb5\xf1D\xd2\x80&\x95Z.[\x08K\xff\xb4\xf6U\x06@\xb0\xf6'
 b'v\xfd\x80\xd4+\xd5\xd3\xc8\xeeP\xe9 !\xe4\x85\x03,\x1c0\xd2i?Y\xd9'
 b'\xb4\x14\xfd\xe0aL\xf0\xf8\x1c\xb3\xaa\xe4\x89\xa1\xc0\xf3\xa6#\x1a\xb0'
 b'W)\xfcB\x1d#\xb9jvJ\xee\xd2\xc7:7N\x9cy\x923\x9e\xbc2r \xd1\xb8U'
 b'\xe9\x17\xf5\xecV\xbe\xd4\t\xa7\xe3\x01\xc5\\S\x1d\x89j\x83\xeb\xca'
 b'\xf1A\x88F\xab?\xad\xb7\x1c9\xa2M\x18\xbb\xf7\xb6J\xfaq\xf0\xa8\xf1\t\xfb'
 b'\xed\xf7\x02\xfe\xe7KQ\xd1}\xd6\x82\x14\x90\xf1P\xdd\xc4\x1a\xbe\t\xcdQF\xb9'
 b'H\x0e\xcbG\xca\xb9FV=?)j\x93\xce\xb8\xc8\xeeN\xe8\xd8\x04\xa6\x11)'
 b'\x16\xa0\xbe\x0c\xd1,:@\xe4`\x0e/L\x0b\x01\xe8\xbe*7\xf1@C\\}\x9aQ\xbe\x98'
 b'\n\xa3\xeb\x1ce\xc5+\xfed\n\xed\xa4\xf6DTQ\x9f\xcc(\xa9\xaf\xcb\x98\x8a'
 b'i3\xdf}\xc7,c\x14N(\xf6!\xc7\xbd\xe1\x87bF\xa4\xa9x\xe0\x80\xbf\x03\xdeyq'
 b'\x10\xfa&\xde\x81\x17\xc5U)O\t!tZ\x8b\x0c\x9dyz\x98D\x85-\xea5^{\x0e'
 b"J\x98\xd8P\x9b)\xcf_\xbeQ\x8b!\x03)\xe8\xc9\x15A\xe7'\x0c\xfd\x1d\x85"
 b' \x0b\xe3m\xdd|\xa7\xa31\xce-\xc6\xcc\xec\x1a\xd5\x96\xf1>C\xb2y\xaf\x18'
 b'\x02\x92\'\xb0\x8bn\x94fW\x8e\xc4\xe1\'\xd3\xc1Q\x1b"J\xce\xf9\x13Xl'
 b'\xdcN_\xd2\x12\xa9\x19C\x8d\x06X\xd4\x14h\xcb\xe6\xf0-\x8e`\xf1\xd5$#'
 b'\x9f|\x8c\x1b\xca\x9a\xadb\x1cu.+N\xc0qqlMHY\xcet\x86\xfa\xdf\x89\xcd\x00'
 b'(\x9b;\xa8_\xa8\x9f\xaf\x9fd*\xe3hc\x99J\xaa\xa8R\x80d\x8fOu>\x05-\xdb'
 b'\xc4\x84\x9c:\xfc3\x1e\xc2\xaf\xf8\xc3\x98%\xa1\xffqe\xb4\xc3G'
 b'\x9d\xa9\xee\xadOM\xfbV\xa7`\x12\xd0\xe1\x9d\x0e\xb3J7\x19\xbe\t\xbe\x9a\xa5'
 b'G%\x1d\xc1%:\xa5|7\x9c\x1e\xa04\x06\xd9\xe8`\x82\xe3u\x86Ve\x9d\x159\x03\xbd'
 b'\xfd>.\xaf\x8f\xd0\xe8w\xf7\xea\x12\x9dI\x93\xa8\xc7\xb95\xea\rQ\xbf\x8a\xb7'
 b'\xf0O\xa6_"\xd5\xe9\x03=\xf8\xa8\x84\n\xdb\x97\xa5\x91\x1d\xbe\xac'
 b'\xcd\xa2\x8e[\xb8\xef\x84\x96\xfe\r\x7f\xcf\xb0\xf37\x18\xc9\x9e\xdd['
 b'\x92#\x97\xae\xde\xaea\xe4i\xd3\x07I\x1c^\x13W\t\xd0\xcb$[\xb2\xa5_'
 b'\x08g\xad\xd5\x15\xffL\xfd5!Y\x15\xa1\xab\xa3c\x10\xd0_`\x97\x8af\xf9'
 b'\x05g\xa3nF\x02V@\xd3\xeaM\x0eK\xe7\xf1nI\xa2\xcfB\xea\x84\x8d\xb7q\xac\r\\'
 b'\xf3%i\xb0\xd0i\x17\x8d~\x93\xcb%\xe4\x08\x01\xfa\xf8\xedH\xe2%\xd63\x97'
 b'\x15\xf3\xae\x10\xb950\xe6\x88\xe7\x19\x9eL\x1c%\x96\xe5\t,\xdev\x9a6\xd7'
 b'\x8b\xb5]\xbd\x9c\xa07>e5\xdd\x04\xf0\xd5\xe90m*"\x86B\xc7\xff\x9f'
 b'\x07\xd8\xbd\x84\xf7\x0b]\x91\xbe \x94\x11:\xbc\xd6.,\xce\xdbo\xad\xd4J\xdc'
 b'\xd7;b\xc8\xe8\x8a=A\xc5)\xabpC\x00c\x8e\xccz\x806\xd5`\x05~\x81\x174*'
 b',!\xdc\xfa`=T\x8d\xe6s\x00n\xca\xc1v\xe4\xcf\x97Z\rh\x12:,3N\xc6E\xd37\x1e['
 b'\xc40u\xa4T\xa2\xf01\x96\xbb\xfc\xd8\xeaTq\xd3o\xf1\xa8\x9d1\xf6Z\xee'
 b'\xeb7\x85\xc0\x84\x88\xd8\x1c\x8di[\xedr\xc5\x8f\x0fpWQ:\xc7\x14L\x8e'
 b'\x15S\xa3$\xe8*\xb4\xa2\x83\xdf-\x8f\xc07\xb8[!\xdb3sW\xc7\xdeMF\xf7\x8e1'
 b'@\x95\x06\xeb>H\xa8\xc7\xaa\xcf[\xd7QCj#\xb2\xae\xc3t\xda\xc9T\xe7'
 b'\x10\x8a\x9bEB\x15\x81\xf8\x06[G\x0b\x1e\x80\xf2\x91\x93q\xc7\xd7\xb1X\x03;'
 b'\x1fY\xf5\x10A\xbf\x03:\xd3\xc5\x98jU\xcao\x98\x84\xcd\xc8\x9fm-|\x93'
 b't\x18I\xaaR\xa9\xba!V\x1a_\x01E\xe1\xdb\xce\x9a\xb0u\xae\x9dL\x88\x9a8\x14X+'
 b'\xa8\xd0+\x1c\x06\x8dX\xd7\x99:\xe9]K\xfd\xba\x88\xcb\x1crIQ\x8b\xddb'
 b'O\xc9\r\xbd\xa7\x01\x00\xd6\xe3\x8f\x06\\f\t\xa0\x184\x05\xb8\x10'
 b'\x0b\x19f\xd5\xc6\xc4\xcc\x8ct\xde\x89~\x9d\x8e:\x8c\xc6\x08\xb40'
 b"v\xb4\xed\x89\x97\xae\xf5\x99\xf1\x8af'\xcbc\xd6\x1d\txe.\xb9\xbf\x04C"
 b'\x16\xe1\xedA\x14]\r\xa7\xd5,\xd5#\xb8x\x07\xbcex\xbaIi\x00m\xc1'
 b'\xd6&\x89\x0b\n,\xb7\x95\x8c\xc9\x08?\xbe\xd3\x81\x10\xc6Uu\xab'
 b'\xcf\x83\xc2\xce!S\x8d\xb7\xa7\xc5\x88Y\xe9\xa3\x96\x82\x91\xc2D\xf7'
 b'\xaa0\xa2\xde\x08\xb43\x06\xd7\xd4\xf4\xfa\xb3GX9\x94\xcc\xfd\x9bi\xb7L*'
 b'\r;7\xef\xc3g\x9fD\xe2\xb1\xf8\xbb#\xfa\r!8\xc5=(\x06\xbf\xb3\xbc'
 b'\x99\x9b\xa9\xba\x99\x0b\x96\xedAa\x01\x8bN\x01\xa6I\xa5D\xadc}\t\xf3E'
 b'wo1\xb4sc\xea\xff\xa1\xfb\xd9{myP\\\xe2q"\xd0~]\\BX\x99\x15\xc6\xb6\xbd\xd5*'
 b'\xde\x04K\x85W\xf0Ht\x00\x1d\x0b\xd5U*\xdc\xd6\xcd\x05\x1c\xe6\x82\\\xebc'
 b'A\xd7\xc82x\x00i\n\x04Dd\xb0\xfa+\xc7}\x87bP\xe0\x1a\xd3?p\xedA\xd0\x86'
 b'b\xff\xbd\x1as\xde\xb0"\x1e`o\xdd\xeb,km\xfe$\xf5\x07\xee\xd9\xde\x8c'
 b'S8\xef\xdd\xae\xac\x1c\x93\xe8\xed3\xfd\x19<#\xba0\x1d1%\xf7x\xfbn'
 b'\xd14\xc8\xd6n\xea\xb4\x1f\x80\xc8\xb8\xc1E\xfcx3\x81Z\xdfo\xbc+\\\xb7'
 b'\xf7\x01\xc8\xac\xb3\x0b\xf9\xab\n\xc7\t\x9d\xe6\xdd<\xe4\x9f1\x88V'
 b'}\xc1\xe7\x19E\x15\xdfv\xae\xd1R\xb5\xc0\x82\xd0\xa8\xd5\x86q\xed'
 b"\xbb@\xf3\x1b\xccH\xc1\xf7\xe8\x1c^\x9aJ\x05\xe8\x83|\xba'/H\x95Y/"
 b'\xd7\x12\xa4\xa8\xb8S\xadB\x83X\x0f\xdf\xf2d\xe9\xe9\xe2\xa8%#\xb2\xe9n\x82'
 b"\xa1\n\xc4#\xd9-_\xce\xbd[Vkh\xd0\xc7\x8ah\xae6\xd1\x8f\xb6\xd4'\xc2L\xad4"
 b'-yA)\xf7Z~\xef\xa9\\\xa3\rr\xfeb\xfc\xdc\xc4\x01\x03\x155\x9a)E\xe4\x9cQ'
 b'x\xaa\x97\xe9\xe0\xb3\rw\xa3\xca\xd4\x05[\xb7u\x80\xcbT\x11H[\xd2T\xee'
 b'\xab\x03\xd1\xbe\xc9~\x88%AaU\x8b\xe4\xa4^3\xb5\xb3\xb1NT\xc9\x0e:'
 b'\xcf\x9a\x18\xed\xdd\xb2\xeb\x9a\xa4]a\xefq\xe01\x8f\x1e\x89h\xb2'
 b'\xf7f\x85\x1d"\x9a\x1e\xdb\xcd\xb4)\x82\x12\x8a\xc5\xebE\xfc\xdc\x1d'
 b"\xfd\x0eW\xf9\xda\xda%\x07\xfb\x93\x80\xc8\x16\x1a\x96'47o\x99\x1c\x9aF\xcf"
 b'\':\xb3\xbe\x90"\xca8+\x9b(\xc0\x1e*\xa1\x19\'P\x80FR\x8b\xddGG\xcf\x8b\xcc'
 b'\x11\xe2\xdd\x0f\x868|\x8d\xf0\xa7\xc6\xce\x0fpop\x91\x97\x1d6\xe5\xd5I\xa7'
 b')\x16\xb9"l\xc1q\x9eDM\xeex\xeb\x16\x05%3\xb5\xa2%C\xadW\x94\xaf\x91P\xf8'
 b'\xa7\x8fd\xe6\xc6\x1ab\xa50\xc1\xe4)\xeb\x1a\x96\x8c\xf7\xf1\xd3\x15'
 b'\x87<\xab\x1b\x10\x82\x1e\x04M\xc1\xe2<\xea\xbb\\\xefCC\x14x\x95\xf04\xd5'
 b'\xfb\\"V\xa7\xa5Q\xed\xf1\x99\xf5\x9cC\xa6\xa0o\x95K\x98sg>\xd6\xcd5{j\xad'
 b'\x8b\xd0\x90k\x98\x07\xde\x17\x00L\xf2Yl\x03\xbe\x96\x00\xf3\x07B'
 b'\xc3\x88T\x0f\xe5^\x88\xc3i?\xbb\xb1\x83\x06\xf3\x82\xbb\xb8\xb7"'
 b'\x9b\xde\x8b\xf7y\x1b\xfb\xf6\xa9::\xf2\xbe\x7f=\xf6h\x975\x99U\\\xbae'
 b's0\xe8g\xd2\xbed\xebz0\x8f\xda\x19\x81\xfc|\x0e\x11\x81C[\x9fn\x07\xcf2.\xcf'
 b'A\xf5C*\xeay\xfdu*\xac\xceU\x96(*\x1f"\x95\x12|m\x19r\x10)\xa0\n\xbe'
 b'\x05\xac\x84N\xccu\xa1\xae\xe8\xfa2:\x87{\x7f\x90\xce\xe8lk\xb9\x06\xa0\xca'
 b'\x9a\xd33\x19/\x86X\xf9\x81\x99\xe4\xccg\x80\x87\xe3`]wrHH\x1b\xb5LN\xc4S'
 b'\xa6\x8dt\xa0\x96\x98\xc4\xee\x9b\x8f\x87\xa55\x8d\xa9\xbdf\x13A\xa0'
 b'r\xaf\x8c\xbfoY\x95\x92\xcb\x19\x12Yy\x90\xe3#X\x86T\xf3h\x08\x02x'
 b'\xb3\x15\x9ba\xa5\x0c\xa7P\xed\xfe\xc9\x0e\x13\x12g\xa7azgY\x882\xda\xb5'
 b'\x90b\x16\xe6\xedR,\xfaM\xd8\xad\x8d%nX\xa9\xcb\x11,q\x986IT\xfc\x90\xac\xc8'
 b'E\xf5$\x16\x0f\x17\x82x9:\x8a\xa3hP?\x19d\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t'
 b'\xf6fP\xdd\xd7j\x86\x03\x18)/\x87\tWVs\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n'
 b'\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f'
 b'\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3'
 b'\xd8or\x8e\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW'
 b'\x95Hv\x9d')

test_signature_CoinBase = (
 b'\x00\x00\x00\x0b\x01\xc6\x83\xd8Y\xb4\xf2\x1cC\xe0VK\xe6\xb9X\x03V\xfd\x98?'
 b'Z\xb2\xe2^\xc5\x15s\xc2\xfb+\xd5\x93%\xc32gM\xbf?\xbbX\xad3\xb8'
 b'\n\xc4\xfa\xbd\xbb\xb3\x9a\xf2\xc6\xb6\x85Ia\x9b\xe1\x91\x89B\x873'
 b"\xe6\xd7\x12'\xed \x11\xdc*G\x8d\xfd\x01\xd368)\xa45w\xf9@\xe0&o\x1d\x9c\xa9"
 b'\x1d\xccuq\x9b\xf3`-\xba+\xa1O{-).\x96\xdf\x10\xaa\xca\xbc\xb4t'
 b'\x9d\x01\xb4\xac\x96\xea\xd5\x06\xa36\x92z\x8a\x15z\x81}~7`\x8c\xf2p\xa0'
 b"}\x90\xaa'\x91\xdf\x193K7\x0ceIX\x1d5\xed\xf1\x19\xd2\x10`\xf1\xb8"
 b'\xde\xe15\x80\xbd\xbd\x1f\x19\x0b1\xee\xe2XT\x93\xd5\xeb\xafh\xd7'
 b'\xfd\xe0\xeb\xfd>\xb0\x03@\x15%\x8b\xb9\xef\xe1\xd2?\x8cB\xfdA\xad\xf4\xae/'
 b'x\x9d\xc0\xf4r\xe9\x97\xc9\xb6T\xe5\x0f\xe5\x10\x15\xec\x15\x1e\x86\xc1'
 b'H\xcc\xe2\xcc\x02\xb7\xf6\x04Js\xf1j\x9a\xdb\xe0\xbf\x8f5\xadJD\xad\xee\xab'
 b'\xc3\xfcw,]T\xe2\xb0\x93\xe6\x9f\xc3`\xd7y0\x08\x9d\x9aY`b\xe0\xc4'
 b'd\x9e\x1f\xf1\x15\x1d\xd1\x84\xf1\xe7\xab{\xc5\x9ff\x06p\x8c1\x00\x077w`'
 b'\x08\xd9w\x00\x12\xfb`\xb5\x16\x12c"};x\x9b4\xb7U\x1e\x89bn\xaf\xb9\x87dB'
 b';\x1a^1\xad(\xa2L\\\xe5C\x0e-4\xb0O\xbe\x80\x16\x0c\xb2j\x89\xc5'
 b'\xc3\xa5]\xc6\x0f\xc5\r\x93\x1e7#4:W\x87\x9a\xd9\xf8*\xa5\x9b1\xed\x00'
 b'\xda0\x13m\xad\xbe6\x1f2\x9a\xa1{:\xd2^Z\x96\x89P\xf7\xc9m\xc3\x8d'
 b'+\xa0\x0e\xed\x1el\x99,\x0e\x99~X\xb5k+\x8d}\xb5j5\xe8\xb5\x91\xd5'
 b'\x11\xe4\x1aFfpW\x82\x14\r6\xb4S5N<\xfa\xcd\xbb\xa9\xddP\xa7@\xc2\xa0\xd1+'
 b'\xe5n\r\xf6o\x03\xbdR4T\xf9\xc7\x0e6\xe0\x04\x0c\xf3\xe2\xc5\x95p*\xd2'
 b'r5@\x1a\x89\xa9\xea\xc6\xa9\x9br\xa6\xc9\xaa\x94\x8d\x0bd_R<\x19|B'
 b'\xaf\xeb\x88\x077\xf5i\x81\xcc0\xf6\xfd\x07\x14\x9f%\xc2\x9c\xf8\xa4'
 b'E\x11\x83\x1du\xa0\xecVJ\x18{\x04\xd2\x9f;\x9bM\xcb\xe3pu\x14\x1bh'
 b'\xa8|\xd4\x06\x8a\x00\xfbf\x92S\xdd\xc5\xe5\x82\xbc\xbc?\r\x95\xac'
 b')\x9b\xa8\xd2\xeeQ\xb1:\xd1\xc7\x14\xe7\xd0\x00Kj\x9e\xe9\xd7\x1a'
 b'\xc5\xeej\xb8\x08\xbe\x18\x0c-\xab;\x90\x85\xf51\x03\x19ji\xce\xb5D\xe0X'
 b'q\xf1E6[\x8c\xcb\xa8\xaf\x86\xe4\xd5\xaa\xea\xfd=O\xca\x119\xa1\xfe\xd7D'
 b'\xf0\xd6\x967\x1f}\xe6\xd20\x90\xcdoh>;\xaf\xe7\x19D\xc2an\x8b+\xcf}\xaeO'
 b'\x8c\x06\xaa\x06\xd4\xb7\xb2\xb4\x8f\xa4\xb1m\xe4C\x87\x9c\xd8\xee\xab\x94'
 b"\x9b>'<\xffZV\x9c6\xcf\x97d\x1b\xc6\xe7\xfe\xe1T\xc5/\xedcg\xaf0\x80\xbc\xae"
 b'\xbbg\xb2\x94\x8f{\xadJ\xf9\xa2\xed>G\x13\xad\xe4\xbe\x8f\xdf]\xe5<-\xa5'
 b'\xb3\\\xf4`8\xb3\xb4\xa2\xa7\xdd\xfe\xb8\xe7w\x17,o\xda\x9f\xe7\xf8\t\xcc*'
 b'\xe5\xb3V\xf4\x9d<\x99\xa0\x82P\xd72\x03\xf1R\xa1\xd0\xa0tkv%\xca\xa0'
 b'\xe5VP\xe8L\x87\xe1NS+\xb8\xb6\x9f\x1frY\x0e\\\xa6\xc8\x9b\xf5\x9f5\x0bwuG'
 b'W\xa4\xbbP\x00\x9b\xb3D\xad)\xb2\xbe\xdfPD\xc3\x9d\xf7\x82P0\xb3\xb9\x0b'
 b';;\x1a))\xfe\xd4\xcbb}$\xca-P\xd8@v\xa9\x16m\xfe7>4\x99e\xabRu\x1d+\xb4'
 b'\x9eg"y\x9e\xd5}\xb9\xf0\xddAJ\xe5\xd6\xa7\x02\xac/\xf5\x80y0\xa2\xd5'
 b'\x05\x9b\xc1\x16]-|\x12\xc9\xccN\xdcL\xd3\xf5\x036\xb9e\xe7%\xb6\x9aP'
 b'\xf8y\xb1\xf1\x81\xf0y\x10Qb\x0b0\xb2\xbd\xc6=\xd6\xff\xf5\xfep\\PZ'
 b'h\xd9\xa7\xbc\xbb4\x96C\x07\xd9\xdb\xf69\xa8\xe5h\x84\xb1\xc2\x89x~`\xcd'
 b"\x1bL\xad\x97\xfeIv[n~]U Q\xbc\x1b\xf2|s4\xf5\xfa2\x00\xab'm\x18"
 b'=\x89\x0e\xdd\x99fj\xe8\x81\xd0\xf15\x9aT`\xc9\x8d\xa1\xd2\xd1'
 b'\xb6\x88\xa8\xc5J\x0b\x94\x94&\x84\x04\x8eR\x81;y\x18\x88\xb7\xfeI\xe0-@'
 b'/\x90+\x902\x9a\xe4\x99>[\x8e\xbc\xd8;\xd0\xcc6.\x8b\xa7\x81Cd\x96>V\xf6\n'
 b'\x81~\xfau\xca\xb6\x18\xd7\x1a\x9a\xc4\x1eo\x87,-\x9d\x8a\x91\x8b'
 b'\xfa\xbct\xd5|Ll\x07\x01\x14>\xe5X@\x99\xb3WCg\x9c\xe2\xe9+\xfd\x93CE:'
 b'8\xb0\xd3N\xc5\x8c\xc7|E\xb0\x18G\xa8\x8d\xabP8\x1b\xf7\xf4U\xfc\x7f\xb5'
 b'\xec\x10\xf5\xc4\xcf\xa5zd\x82\x90a^\x04\xa1.(W\x04{E\xa9\x11\xe3\xa5'
 b'\n\xfe\x0eB\x8b\xd3\x13O,x\xb8w\x0fo\x1b14\xfe(\xa9\x16\xb3\xa4H\xcc\xb6!<'
 b'\xcf\xaa\xef"s)\xbf\xab8\xc22\xe7\x96"y^\x9fG\x92O\xc0!i\xce*\xb1\x9d\xc4'
 b'\xf6\xdfo\n\x9b\xbd\x8e\xdeu\xbd-n\xc1\x0b"\x8a\xf9\x154x|k&.\xe8\xc2a\xe1'
 b'\xbe\xd6\xda\xc4Xb\xaa\x9ftb\xb5\xd6\x04\xe5\xbf^\xe2\x042\x8eLL<\xc8'
 b'\x9e\\\x1a\x06\x1f\xecw\xf7\tZ}5\x8e\xe2=s\xe6\xdf\xbc\xf7\xba\xab\xb5\xb4'
 b'\x18\xb3\xf4`4c\x84\xa6\xe23\x0c\xcd"\xfckZ\xff\xe9\xf5\xd3\xb9\x93\xf0\x82'
 b'\x18\x8d\xe3Qx\xb4X\x16\x89\x8a\x9e\x05Y=\x1f\xa4jq/\xb5\r\xcc\t\xd7'
 b'V\x82M\x84\x83\xc4\xe91\x7f\x96w\x14a\xa8\xb3\xd4\xaa\x1ey\x1c'
 b'\xce\x8b\x1d\xa03\x85\x91&r\xb0@61\x04\x91\x9d\xd61\x12=!\xde\xb7='
 b'O\x88\xee\x9ct[\xa0\xc5q\xd2\x03\xc2\xf9\x89\x89L\x15\xf9\x08\xbej\x97o '
 b'\x1c\xec\x81\x1b\xd6\xd0\x7f\xf1\xd9\x7f\xdc\xcd\x96\x96\x89D\xf8\x10L\x8f'
 b'E\xfd"\xae\xe9\xa1\x92\xdb\x87\x81fAn\xe3\xe1\xa2\xa9\xc3\x1b\xf8'
 b'\xb2\xf8\xa9] \xc60\xa1\xecW\x9b\x0b7\x96\x1a9\xe6\xa3X\xf6u\xbd\x02\xb5'
 b'\x9d\xbb\xbb;\x8c\xfd\xc1\xb8Y"%\\x\xc1\xe3\x95\xc3\xdc\xe9\x11'
 b'\x8d\x1e\xc2\xcf\xa2~+\x92\xce4\xcbOd\xec\xb9\xda\x83P>\xe6\xd3\xdeM\xa7'
 b'r\x8a5B\x9b\x105\x1b\xa8\x8e\x08\xf0\x822\t\x9e\xb0\xb4\xbd\xcd*\xaf3\xcd'
 b'\xafT\xe3\xf5\t\x10\x89\x85\xf4\x01tz\xb6\x13\xa52%\xee|\xff}\xb3b\xcf'
 b'\x81Z\x9b\xed\xc0J\xad\x1d\x17\xa2\xec\x0f\xe1\xd37$\x04q\x0b\xf4'
 b'\xf8\xb3\xfc\x93\x1d|\xc5N\xe0\xbeR\x9c\x0c+\xac\xd2\x92<\xbf\xf4'
 b'/\xdf\xae\xde\xe85\xd7y.\xbee\xa6\x1d\x81j\x90m\xf0T\xd5fP\x80Q\xdbr\xc3\x11'
 b't\xc4\x84]Pot?a\xfbC\xab|\x93!\x01\xad\x9b=\xc3\xf4*\xe8\x02\xbe\x00\xfdK'
 b"\nA\xec\xf3\x0ci\x89x:'\x8f\xc3\xb3\x01\xe1>\x8cZt\xff\x1bd\xc3k"
 b']\x9f\x1a\xdc\xb3iMgs7E\x0c\xca\x1d\x81\xf2\x84v\xe0n\xca\x9c\x9fg\xd7n\xfeT'
 b'\x15\xc2\xf7\xa6\x1b\xf2\x0f/E\xc3\x840-\x95b\xf4_X=\x0e\x0f\x10\x88\xf8'
 b'\xf4DN\xb3|/\xad\xac\x04\xee\xf8\x0f\xa3\xe61\x16\xe8\xde\xbf/\xfag\xfcy'
 b'x\xe6\r;Pnh\xef\x07\x91\r]Y\xb2nU\x99\xf7\xba\xb1\x9e\xee\xf6J\xcdQD\x13'
 b'\xb2-\x88I\x14\x9e\xf7\xb1\x89%\xed\xb4\xee\x0f\x8b\xdf=\x98\x8b\xd0'
 b'\xd5\xea\xa1K\xe3\x1a\xb3\x04\xdc\xe8\xbdY\x1c\x83\x0e\t?\x0b\xcb\x1eh=5\xf2'
 b'\xd3<-\x18\x81Fa*|\x18\xdf\xd2A\x13\xe2\x08\xe8\xe7\xba/\n\xd3\x13k'
 b'\xf8\xdb\xdc\xb4|\\c\xf4\xd6\x07)&\x82\xce>\xa3\xab\x19\xeb\x04A\xb6}\xb1'
 b'\x9c\xd0\xe8\x83\xd7\xc9b\xd6\xac\x838\xfb(t\x01Q\x88\xf5\xf0K7\x12\x13\xf9'
 b'=\xf3\xd7Q\xb4\xed\x0etGo\xdc\t\xe6Q\x03W\xbd\x16\x96i\x97\x96z\xb1'
 b'\xc3X\x1f\x1e\t\xd9\xe3W\xb6\xd4\x93*/4\xf1\x01\xc1\x8a_\xe7n%\xe7k\x7fpEA'
 b'UU\x9c\x00u\x98\xf5\x1ak4\xf8\x8d\x87\xed\xa8\xf3\x1c\xc2d\x17\xd6\xd7\x942'
 b'\x13\xfc\x8a\x85\x15,\xf8`\xd0R\xe5\xcd\x90\x06+\xd5E\x17\x9f\x1e'
 b'\x01\xeb\xcf\xa2\x04uP3n\xbb\x89W\nK\x02\xae^s\x85\xa5\xca&\x82\x00'
 b'O\xc8M\xeaD\\\xf1P5vYD\xdd\xb9\x96o\xad\xa8\xff\xa3\xa5j\xdb\x06\x92$\x0cQ'
 b'\xe9,\x15\xa1_\x17\xb23\xef\x9c\xf0\xdb\xfc`\xc0\x1b\xb1\xd6\x9d\xd1'
 b'l\xb7\xae6W\xce!\x7f11y\x0f\xec\x9fF\xd5\x1f_)\x0c\x18\x0b8xf\xe1\xbb\x96'
 b'[\xa8\xd8\x1b\x85\xa8\xbc\xb2I\xf9<\xb2\xa3\xad\x1f\x12\x12;\t|R\x14}\xb2'
 b'SF\x8b6\x9e\xb9\x92\x8b\xf7P\x9e8\x93\x14\xdbYD3\x11\xcc\xf1w\x00j'
 b'\x11\x18\xc3\x85Z\xaa\xa8\xe7Z\x17\xba9\\\xcc\xd8\x13\xff\xd2"\x84'
 b'\x9a\xc5\x98\xbb\xd8o\x1f\x93\x1a{\x99\x9d\x02\xa5(~\x14\xdf\xf7\xad'
 b'S\xc2\x1e\x16\xb6*\x15\xb2\x95U\x84h,*\xac\xf7\x84\x90\x86S\xf71\x16\x8d'
 b'\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h '
 b'\xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN'
 b'\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e\xd6\xe9\x92\x95'
 b'\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_Vote = (
 b'\x00\x00\x00\x0b\x01\xc6\x83\xd8Y\xb4\xf2\x1cC\xe0VK\xe6\xb9X\x03V\xfd\x98?'
 b'Z\xb2\xe2^\xc5\x15s\xc2\xfb+\xd5\x93Y\x1d\x92eot\xd9E4\x7f$B\xe6p\xaa\xed'
 b'/w\xd2\x96\x12+\x0c\x87\xbd\xbc)\xa1Y\xf2u\x99\x07\x08\x0es?\x99\x10\x94'
 b'\x13\x81\x1d\x18\xd1\x99\x9a\xbb~k3_\xbei{\xd6\xad\xe0\xb2HK\xf0\xed@'
 b'\xfd\xfeNU\x83o\xc8\x81\xc3\xa7\xd6\xb1\x8bye<\xdf"\x19ZEk;\xeb'
 b'\xb0\xc1\xae\xb6FQ5\xe98\ro\xa8\xd4IG;gA\x00\x87\x8f\x99\xb9\xb8i1\xdfo'
 b'\x91\xd5\xcb\xef\x8c\xe2\xd3\xf2\xa6Q!\xb7<j\xa7\x01\xf3\x91s\xb4\t\xb7TD'
 b'\xb0V\x85\xdf\xf1\x9c\x13O\x1eW\x17X!_+\x90y%t\xceQ"9>\x0b\xfd\x85u'
 b'\xa4\x18\xa0\x8c\x12\x05\xacX/\xec\xcf\xb74W(\x8c\x97\xb9\xb7\x91'
 b'\x9b\xed\xfe\x1e\t\x9a\x8bFW\xaa\xbdN\x9a?\x06\x91\xf6\x16\xb2\xbe\xa7As\xd8'
 b'Vgj\x96\x03\xab\xf8{\xde\xb6b\x837\x90\x8e\xbf>\xd1\x8b \xa0\x9a\xb3\xd7'
 b'\xb9\x10$8\xa8B\x934\xf9\xa1\x15"\x84\\\x1e\xa4>\xe0\xea\x96\x93X\xea8'
 b'\xe1e\xd6\x97\x1e2M\x02\xf5\x15\x9a\xb5h\x1f\x83\x16;\xa0&\x8b\xc2\xfeB\xcb'
 b":\xdd\xf9<\xef#\xb0\xb0\xcb*J'\xea\xbf4\x0eQ\xe62C\xe49:\x0b\x9fJ\x14\x91"
 b'+\xc6\x964\x8c\x18"@oz!I\xac\xf4\xb8\x0eh\x87\xdc&^I.\x1b\xb0\x02M,'
 b'w\x8b\xb3\x9a2e\xc7\x99\xa2,`g \xd5a\x07\xe4\xcbY\x00K\xc7\x0c\xf0'
 b'\xa5\x1dU\xfaO\xb4A\xae\x04z\xca\x0c\xff\xdd\xf7\xa7\x81B0\xe7\xc3a|l'
 b'\x7f\x8e \x1a\xf4j\x89\x15)\xd7\x0e\xa9\x87\x16u#Gj\xbd\x17\\\xdc\xff1'
 b"\xc5\xc7?'\xd6\x934<\xf1\x1c\xbaC}L\x92\xf6\x07\xf3\xeb\xe0a\xab\x87\xc1"
 b'\xdf \xdcP`FA|\x93\xe7F\x9f\xf5\x9e\xeb\x88\xceJ\xdb\xedk\x1f\xafa'
 b'\x81\xc6;\xfc\xa6\xd8\xeb%\x84\x90\x82\xec\x8a\x15\x0e\x94\xaf\xf7\xf9\xc8'
 b'}\xacX\xb9\xa5\xc2\xb6>0A\x17\xfds\xda\x10\x8d\xd9\xa9~s\x17\xab|\x81'
 b'M\x14\xbaJ;\x92\xf1\xa2\xbf\x17\x0e\xb1\r\xde\xff\xf6\xa8SW\xf0\x93\xe3B\x17'
 b'\xcc\xedh\xa4\x99\x94\x87\xde\xea\x85\\\xb2=\xb0((\xd0\x00Kj\x9e\xe9\xd7\x1a'
 b'\xc5\xeej\xb8\x08\xbe\x18\x0c-\xab;\x90\x85\xf51\x03\x19ji\xce\xb5D\xe0X'
 b'\x02\xd49\x8d\xbc\x8a8\xb1\xbe\xf3\x83\xb37=KMI\x83\x0e\x10\xdc@L\x9b'
 b'\x1fx\xc2;\x18\xfd-\x9aK\xd9\x88\xe2\x14\x04t~}^\x00\x8f1\xe7\xc2\x84'
 b'|>\x99\xd4b\x91\x02\x8c\xafeI\xb2a\xe0\xac\xb5|2y:&\x86#\xe7\xc9\x86}"'
 b'\x07\xda\xbb\x99p\x87d\nR\x12\x95JQ\xa3\xe1j\xf9\x843m\x1e\xc07\xd4'
 b'\xf0+b\x82\x96h\x9cOY\xad\xce\x93\x94<q{T\x00\x7f\xe1\xbf<\xe9\xdb'
 b'\xda\xeeo\xca3\xec\xcb\xe6n\x9b\x08\xf7*\xb8akn\\\xdel\xa5\x10\xdd\x14'
 b'N\xc9\xbe\x96\xe0Ki\xa0\xc1\xd0\x91\x89\xd74\xf8\x887\x04g\xfbJ\x01"\x84'
 b'\x1bXB$\xd3L\x08\x90\x96?\xe6\xc8\x1e\xc3\x84=\x13\x83\x89e\x03\x0b[\x96'
 b"\x91D\xd5|\xe1?\x06\xe9\x1f!\xa1\xadR\xe7\x9e.'\x8c\xe6\xbb>\x0bU'X\xf2T\x04"
 b'\xf1qh\xdf\x1a<\x0cJ7\xcc#\xb3H\xb2\x8b\xa1\xabi\x07\xc5\xb7j\xe6\x88'
 b'\xdaN7\x8a\xf97)\xac\x1asY_\xb2\x81V\x88\x1b\x05\xa8\xf6\x14\x9e\x13e'
 b'k\x1b\x1f\xc1\xae?xn\xc1\xae\xa1FL\x96\x92\x02^\x97\x8b\x10\xddE\x87\xd0'
 b'\x98r\xc5\xf1+\x82A\x9djW\x84\xcd\x02o\x88\xae,+\x7f\xbb-\x8e\x91\x89\\:kV'
 b'H\xdf\xae\x10\x1bj\xfb{Xs\x85"*\x85\x88.g\x02\xb7\x7f\xae\x00\x04\x005vv\x8d'
 b'\xd5\xa6\xa1\xf8\xef\x19\xe31\xb1]\xb7\x8d\x98\x0c\x9e\xeaH\xf6%\xa3'
 b'\xa4G6\x1d\x1f(\xe8,L\x88\x95v\xb6\x19k\x95\xac&\x9bnTN\xbe\xc1]\xa1\xe5Q'
 b'\x8ar\x91|\x1f\x1e\xa6\xfa\r\x86\n\x12\x07\x0f!&;\x08t>\x182\x8b\xb2'
 b'\xdf-\x89JvqA\nrY?\xb2\x80?\xb2{p\x0f\xa2^\xa0\xc9E\xa9\xf3\x96\xb1#'
 b'f\xcb\xc8\xacA\x99\x04Ez~y\xa1\x17I\x9e\xb1\x0c\x87x"I\xe2!\x97'
 b'\n\xf4\xd8\xbf\t-\xb3\xb8\x05\xa2\x9d\x8bOkw\xf8\x83Z\x15#\xb2J@\x9e'
 b'Q\x13\x98\xa4\x0b\xd9\xf1}\xb4\xee&\x8b/\xf7\xbcBox\x9f\xad\xa8\xd1\xf5\xc4'
 b'\xfbEy\xb0\xea\x02\x90D\xa4\xd8\xcb\xd9\xf81\xcd#\x15\xf4}\xdf'
 b'\x14\xf8\x83\x8d\xbb\x19\xe8\xb4?&\xe5|\xd8XX#\x0c\xc2\x8f\n\xaf\t3\xc6'
 b'\x16\xa0\xc5\xfa\x96e\xf3\xcf\xae3xe\x11\xb3\xf4.bR\xe4\x1a\xda$\xe8\x8f'
 b'\xd8\xbc\xf6\x06\x813=E\x82?\xf5\xf8c1\xea6\x9c\xc6a\xe1\xc9\x0b\x88\xff'
 b'\xdb\xb4O\x1cA\x1fM\xc5T\xef\x8b7\xaf\x91\xcd\x84\xab/-\x19\x87?\xff\xa7'
 b'tb\xb5\xd6\x04\xe5\xbf^\xe2\x042\x8eLL<\xc8\x9e\\\x1a\x06\x1f\xecw\xf7\tZ}5'
 b'\x8e\xe2=s8\xac}\xab\x84\x027Y\xef\nDU\xc7\xa2\xc3\xad\xa9Q\x91\xf7&T:\x86'
 b'\x0f\xbf\xfeN\xddi\xaed\xfe\xf7\xb3+\xc7O\xc2\x16S\xaa@\xa1\x87\xa8\xf0N'
 b'\xdd\xcat]\xf1\xaf\xee\x1cS\xb2+\xd7\x7f\x89\x8e\x9b\xe9sN\xae\xa93)+'
 b'\x04\x94\x06\x96\t?5\x97\xfa\x00}\xba\xb97&a\x17*\x0b\xb4\xd3\xb6\xc5{'
 b'<\xe2Omc\xa3c\xd9iVn\x1b<@\xb0B|\x94\x97|\xb4,\nM\xd6v\x06\xeb'
 b'\x91\xb7\xb0\xe4\xa8\xd3\xcb6\x00\xe3\x1f;G\xe5h\xf8\xaap\xfd\x12\x19t\x81\\'
 b'\xf8\x9d\x9b\xdcE\xa1\xadD\x8d\xbd\x10\x97\xa1\xd6\xb7\xac_\x8d1\x8b5U1-'
 b'\xf7=\x9bv\xed\x84\x9c\x1e\xa5\xa8\x88\xfa\xa1\x16\x8dR\xf3\x19\x95\xd0'
 b'ZZi\x99?\xc6L\xfc\xed\xe5\xf8[|\xf19\x1f\x0bj\xd5\x99\xea\x924\xf2'
 b'\xbd\xa4%\xb1\xc3\x85#\xf1\xe2\xa6\xa4\xdc\xb0\x0c\xcf\xe4h#\x95\xa9'
 b'\xf8\xee\xcb\x0c\x0e\xf6\x86\xff\x94\x18\x8b\n\xe1*\x02XYX\xc7x$/\xc3:'
 b'Q\x99\xb0\xed\x8b\x06\x9e\x0c\x8a\x96\xf9n\x04\x90\xfeV\xdaF\xf4\xfa'
 b'f\xeaY\xb69z\x8e\xc4\xd9AG@4\xa8\x99^\xff\x1f\xd5\x0c\xf8\xc1\x8c\x0c'
 b'\xccv\x19\xff!\xca\xa6;Tx\xf9\x15\xcd)p\x7f\xd3\xec>\xe9\x86\xbc[%'
 b'\x93\x05\x03\xc8\xf8\x0fl\x12\x16\xf2\xe5^Jw\xa6\x97\xc7\x91\xf8\x06'
 b'\xfdQ\xf8\xf61&\x97c\x9f\xc4\xb8\xa7\xee:KE\xff\xd0O7\x19=\xd4\x94u;\x15\xbc'
 b'\xc6aU\x07\xeb\x8b\xb7KD\x8e.(\x05\xde\xf3\xb2*\xa1\xb4\xbd\xcd\xf3y\x0c'
 b'\xe1\xa5\x1ej\x19\xf1\x8c\xb4W\xaef\xe19\xd4\xfew\x8cp\xf6\x05HSO\xde'
 b'\xf5\x15&\xd4\xd8\xb2\xff\x96\xba\xe3\xd7\xa5\xe6\xb1\x8e\xfcr]\x06&'
 b'k\x86\x12\x06.\xb4KT#\n\x83\xa0oB\x8bF2\xe0w\xcf\xb0r\xba\xc3N\x03E\x08'
 b'o\xe41\xd1\nmD\xce\xfdC\x0b\x02cB\xe0\xde\xd0\xed!$\x16\xbd\xc9$H_\x00_'
 b'\xd2\xf8\xd1\xcegQ)\xddV\xeay\xd7\xbe\x7fY\xc5\xb8\x85\xb3\xa2|\x85\x0c\xf8'
 b'\x7f\t\xed\xe6$\x0e\xa5\x84\xa1 \xb74\xc6\xb7\x10\xfe:\xbf@\xc0TBf\x08'
 b'5^\x1b\xcf\xd5b\xe3P0\x80\xdf\xd6P\xd94\xfa\xbc\x0f\xeb\xfd\x99\xf2d\x99'
 b"\xb2`3c-\xe3\xd1\xecY\xa6\x90?\xc2p\x828\x90/\xcaq\xd0\xfe\x8bS'[y\xeb"
 b'\xf2+\xf1\xcb\xa4m(\\\x82mL\xf3\x11m\xe8U\xd7<n!\x0bV\xf4\xa5}\xf9O\x03'
 b'#\xd9\x95\xd7\xba\xf5Hs`\xcd>\x14\xde\xa7V)w\x8b\xc9:\x87\x16\x84{%f\xa6\x8d'
 b'#\xde\xd8\xf2\x1c\xd9\x13)\xef\xa91\xd6\xa7\xb7\xb0\xbaUU\x9c\x00'
 b'u\x98\xf5\x1ak4\xf8\x8d\x87\xed\xa8\xf3\x1c\xc2d\x17\xd6\xd7\x942'
 b'\x13\xfc\x8a\x85\x15,\xf8`\x03\xaa\xd0@\xafs\x82\xfe~f\xba\xa1'
 b'\x1c\xe3\x12\xf6Ln\xa8\x12\x8c\x98I\xe7\x12\x1cA\xca6yo\xbd\xbe\x14\t$'
 b'}\xf8\x85\xde`1\x98\x06\xa8N\xeb\xba\xba\x156zY\xf4\x96\x8e\x91Z\xe3.'
 b'\xa9\xdau\x96k\x07\x17\xcan\xa7\xe3\xe7\x98\xcd\xe5\xfc\xd2\x81\xffb@\xec"N'
 b'*\xe6\xf7\x85\xe5\xeb\xa0\xcb\xf4h:\xea\x9crI\xb8\x8bt\xa4@\x91\xfc\xd5"<&cW'
 b's\xa7{\xf8;\xa5\xa0\x8f\xda\xb4\xafi\xe2\x1dpP%\xff\x16o\xa4Rd*\x1eK\xab\xbf'
 b'\x8b\x18\x84"\xceu8\x9bc5\t\x12\x04\xf0\xf0=x\xa5\x01\x0e\xca\xb1\x0e\x85'
 b'4\xd7\xb6\xd5\x92\x00j\xa8\xebx\xd22\xb8c\xf4\xf9\x9b\x11\x8eE'
 b'\x1d\xbb\xa2\x99\x92\xb4A\xa0\x02\xa5(~\x14\xdf\xf7\xadS\xc2\x1e\x16'
 b'\xb6*\x15\xb2\x95U\x84h,*\xac\xf7\x84\x90\x86S\xf71\x16\x8d\x90\xb6\xec\xef'
 b'\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X'
 b'\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG'
 b'\\w\r\xf9\x10Z~\xb3\xd8or\x8e\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf'
 b'\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_Token = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\xd5\xfbt.\xd0\x1c-s\xf1Ku\xe5'
 b'\x08\xb3B\xba\x96T\x7fn\xe1\xb8\xfe\x9d&\x01\xb7\xab\xe8\xc4\xa1s'
 b'\xd8\x02\xab\x07\xd7$\xd0\x0ed\x1c\xd9Cx\x9d@0V\x01\xed\x92[\xef\x94\x05'
 b'[1\x81\x0e\xf4\n\x86T\x01>X(\x11\xd41\t\xd2X\x0e\xca/4\xe3c\x99q\x1f0'
 b'\xb5\xf1D\xd2\x80&\x95Z.[\x08K\xda\xe7\xcf\xa7\xa1\xc7\\\n\xcc\xad\x8dW'
 b'\xbez\xe8\x1ax\x17\xe23\xdeWd\xfa\xab\xa0\xa6\xe0\x89%\xc8q}\xd1\x85y'
 b'P\xb2R\x95\x8c]]$\xe4/\xaf\x8a\xe7\x9a\x9e\x80|\xebKg\xf0\xb2\xe3\xea'
 b'\xfa\xc2(\x16^\x18MF\xe2vry\xfc\x1a\xbbW\x99("\x93 \x0e\xcd\x98\x9e8@\xc1'
 b'\xd1n=Rm0\xb8\x96mMn\xbd(\xa1\xab\xa9\xefn\xeb\xd2y\xeb\x1b\xf0'
 b'\xc0\xc1\x9a\xe0n\xcf\xac\xcc\x17\xc9\x91\xfb\r\xd8K\xfc\x83d2k\xcdQ\xa3y'
 b'\xd8]\x00\xda-\xd2\xa5\x95\x95\xdb6\xc8/\xf9\x04\x98\x89\xac\x00\xb0'
 b'\xaciD\xa0\x93\xce\xb8\xc8\xeeN\xe8\xd8\x04\xa6\x11)\x16\xa0\xbe\x0c\xd1,:@'
 b"\xe4`\x0e/L\x0b\x01\xe8\xbe*7\xf1\xce\x9fzN\xf6\xf8jC\xb1\t\x15$\x90'Q\xeb"
 b"\x92[\xbeJ\xae\xe3 F\xdc'\x8au\xc9\xbbtV\xa5\xe6L\xce\xad\x13k\x17LIn\xb8"
 b'\xf7\x08=\x00\xc8%\xec\xff\xba-@y\x8c\xcd|\xfeb\xea{\x85O3\x01R\xe4&\x04y'
 b'iE\xd6P\x17\xf7&\xe8^ \xfa\xf8\x8e$\x05\xee\x84\xd6\x12\x92\xfd\xcb\xe0!'
 b'\x8aD%b\\H\xc0v\x1f(\x07\xbf\xe3L`\xd5\xd33\xe1\x88\xb6\x98\x0e`\xc4DE&'
 b'\xae\x95\x01\x1eU\xa2\xeb\xdf\xe6^\xa7\x01\xbf\x8e\x97\xdb7\xa5\xf2\x19'
 b'D+\x08\x94\xd6O\x80\xa7\xa1o\xbe\xd11\x8d\x0b1\xef\x01u\xd0\xe8\xba\x08\x93'
 b'\xd7JG\xfa\xa4J\x04P\xe4\x05\xff5\xa7z,wcb\xaf\xac\xe7r\xb8i\xf9\xc5\xccD'
 b'/mB\xaf\xfe\x88\xaf\x054\xc0b\xdf\x19m\xca\xb6\xcej\xadhZ0 \xbd"\x8c\xdbW'
 b"\xd96\x9c'\xdb\x97\r\xd5\x0c\r3,\xea\xbcv[&aXz\x93!}K\xcdEC\xfcY`\xaf\xf0"
 b"'GPD\xe0`\x03\x1f\xad\xe3\xe6X\xb6\xcc\x13\xf5\x06\x8c)\x02\xe9IM\xaf"
 b'\xdb\x8db)\xc5\x95\xc3\xb0_\xb8\x93\xa8\xf0\x02*\x86\xb0\xba\x9b\xdd'
 b'\x7f\x05gw4D\xf5fm\x87\x92)\xd9\xcd\x7f\xfb\xe2\xf3\x19\xa22\xda\x11I'
 b'\xb0\xc1\x19\x0f@x\x8e\xc8@x\xe9/\xf1\x8a\xf9\xb2RZ\x04\xd1\xea\xf9\nW'
 b'\x1e\xaa\x06b\x91\x1d\xbe\xac\xcd\xa2\x8e[\xb8\xef\x84\x96\xfe\r\x7f\xcf'
 b'\xb0\xf37\x18\xc9\x9e\xdd[\x92#\x97\xae\xde\xaea\xe4\xc3x|\xce\x9b\xc5C\xb0'
 b'\x1d\x97\x0f\xd9\x19a\xe8-P#J\xea\xf0\n\xa8\x10\xf4B\xe0\x81]&\x141'
 b'\xdb\xf2\xd1U/`\xad\x0b~\xdd%L\xf4T\xcd \x7f\xc3K\x13\x0b~\xa8\x96'
 b'\xbd\x83"\xd9\x13\x0bN\x00\xe3XLC\xc1\xfc\xfa:Tx=\xf7\x88\xad\x99\xaa'
 b"\x83\x86\x02lT*\x99\xca\xf0\x8cv.\xa1\xee'\xfd$B\xb4\x965n\xb1M\x96xo\xb5"
 b'\xa1\x921O\x97\xcd/c\xdb\xa0\x0b\xdf\xafF\xb43$\xf3\x81\x1aw\xa6\x1c\x94'
 b'\xf9UZ)\xd8\xd8\x7f\xbd\t\xe0\x93\x7f\xd7\x80H\xc1C>\xd8\xdf\xcex\x81\xfc'
 b'\x07\x08\xe4Gi\xdf4\xed\x9b\xfdp\xb1\xe5\xe8h\x8eV\x89W\xc8W,(\xdd[<~\x10'
 b'\x8a\xff8%\x16i)\xf4V\xb8W\xbb\x18\x8f\xaf\x9f\xed\xccw\x7f\x96\x85\xed{'
 b'\x8bag\xcb\x00\xfe\xe0_\xbf\xb9\xad\x80\xcf\xa6}\n\x15\x97j\x9f\x8e\xd4\x19T'
 b'6\xec\xac\x05\x9ak\xd1\x19/\xa1U\xc5\x04\xd8\xe1\x81\xa1\xdfqb\xa1P\xedC'
 b'\x14\x1d\x14\x17\x91\xfd\xd3 ~u=\x00\xcc\xa1\xa5\x08\xe78\xccmG\xb7\xd0C'
 b'\xfe\x0bfV{[h\xb3\xc8T\xd1\xab\x10\xf1\xef\xfd\x88\xf7\xca\xb752\x1a\x10'
 b'\x83\x00\xd7\x97\x8c\x0eb\x91\x08vw~\x86[\xb7Bu1c\x02\xc8\xe6\xd3U'
 b'\xef\xc6E\x9be\xa7\xf5\xfc\xf7\xa5\xb3\x9d\xb4\xab\xaa#5y\xed\n@\x8e\x1d\xe2'
 b'A\xbf\x03:\xd3\xc5\x98jU\xcao\x98\x84\xcd\xc8\x9fm-|\x93t\x18I\xaaR\xa9\xba!'
 b'V\x1a_\x01\xac(\xdd\xcf*\xc6y\x1d\xa0:k\x18{\xd19\xd3\xa0\xe10\xfah\xc8D\xa4'
 b'8\x9a\x80\xf7\n\x9d\xa8\x96\xa6\xa1\x1a\xb8\xd4\xa5\xb9\xfe\x02\x85\xdd\xc4'
 b'\x82\xfc\xb6\xbcj\x02~\xe88\xf0\x8cP\xbc\xcdr\x8e\xea"P\x9f\xea\x01\xf6\xfd'
 b'e\x10\x07\xd2\x01{\x86\x1d:b^\xb4\xc7\x185fg(\xe4\xd63E5/\x17\xff`\xc8\txe.'
 b'\xb9\xbf\x04C\x16\xe1\xedA\x14]\r\xa7\xd5,\xd5#\xb8x\x07\xbcex\xbaI'
 b'i\x00m\xc1\x0c\x1d+yK\xd9\xab\xfe\xb3\x12\x90q:\xab\x9a\x14\xeb\xdd\xb4W'
 b'\xe0V\x83\xef\xb4\x0e\xf6\x18\x9f\xae\xa2\xed\x9bX\xb5H\xd3\xb0{R#\xba3\xed'
 b'\xcb\x02\x80\x88\xd5m4\xb0rin\xbbX\x17j+\xc6l\xc6\xde\xe6{\x15\xc1'
 b'\xfe\xe8\x19&\x87>%\xddRU\x02k~\xb4\x1e8\xb4\xa7\xd9\x9a\r\x88\xc3M'
 b'\xbc\xc2\x80\xf00\xf3\xa0\x08}\xcd\\\xde\x80\xb3\xfa\x0e\xeee5S\x85\x9d7\xf8'
 b'd\xcd\xa7\x9b\xb2\xa6\x1b\xf0x\xc7)\xc2\xff\xd7\xa2\x05\x83\xc3\xf2\xd6'
 b'\xce\x94R\x01\x9e\xfe\xa2\xf1\xf9\x9c\xd7S\x15\xf7-\xe4\xe7\xae\xaf\x95'
 b'\xf0\xd7\xa8\xd2%\xac\\\xaf\xcc\xee\x16g\x1e\xf4\r\x05\x80\x1a\xb6$'
 b'L\xf0\x14\xf7u\x92\xbaS\x14\x1d\x85\x86\xc2\xb5\x84\xc2\xedA\xd0\x86'
 b'b\xff\xbd\x1as\xde\xb0"\x1e`o\xdd\xeb,km\xfe$\xf5\x07\xee\xd9\xde\x8c'
 b'S8\xef\xdd\xa66\x16\x06\xacz\x90v\x9a\x03IiC\x9d]"\x99\x90ta>_\xb6B'
 b'SY\x02\x0f{&\xb6\xd0\x11\x11\xd1k^|\xf9_\xd4\xd9x\x1f\xf2\xd1V\xbd'
 b'\x95:\xdd\x10\xa1`\x8bO8\x07[\x86\xc1*\x80VW\xc6\x8d\x06\xad@\x85z'
 b'\x1e\xb6r\xc8\x14\x928\xaf\xbe\x1a\xf2\xdbB\xeb{\xb9n\xa7\xc4\xc7'
 b'\xc9\xe4\xe9e\x94Z;\x97\xe3\xff\xd5\x05A\xd3)\x8f \xe3\xa1OX\x1f@\xfe'
 b'v\xfc\x8d\x0c\x01\xebE\nE>\xb1KG<o\x80\x82\xd6\x02Oq\xbc\x95\x14'
 b'N\x18\x87\x9e\xaa\xea\x9dH\xb8:\x9dh\xb0\xc7\x08\x7fu\xaf\xacZ0\xeff\xd8'
 b';\x1a\xb2}\x8f\x8c7us\x92\xfd\xe3\xe8%\xe9\xf6\xc2\xf8\xbe\xc3\xb1pO,-gh/'
 b'c\xbe\x05\x94\x99\xf1\xd3\xdd\xdc\x91,:\xfb\x8e\xc5\x15\x7f\xa8\x1f\x87'
 b'\x19\xde\x91\x9d\x8e\xdf\x0c\xc9^!"<\x16\xb3\ts\xea\x9es[\x8a\x81b\xcb'
 b'\x94\x12[\xa3\xf0\x04\x1c\x92\xb2"k\xf4\xcf\xa4\x10\x90\xe6\x99\x1e\xae'
 b'\x0f\x909$\xc0B$\xa7\xeeO\x14_\x04\t\x82\x9c\x9a\xb6\x873\x189fZ\xf2},\xb4'
 b'\x93?*}\xf6\x8e\xa7\\\xde\xdb$\xec\x14i[\x88\x06Qt\xc6\x00\x1e\x99\xe1'
 b"_c\x14\x00\x81\xc2.\x9d\x8b\x98'0#\xf1\xe8\x04Ix\x8b;$\x97\x0b\xf1"
 b'\xa4g\xaf\xba\xb6QX\x16\xf3%\xaf\x005\xb8U\xb6\x13\xef\xa7\xc4/\xd2=\xb7'
 b'\xf3\x1e\xb8\x0b\xa8Ku9\xb3\xfb\xc2\x95\x95va^\xc4o?\xae\x04\x12kM\xfcU\x19/'
 b'5f\xc7\xe4\t\xb6\x9b\x8f\xe0\n\x0e\x81\xbc\x02\x89\x8e\x1c\x0f\x12}'
 b'\x9e\xe0\xe9\x06\xfc\x03|\x7f\xf0\xc3s\xbbZ\x15\x03\xb3e\xaa\xddh\x9ab\xdd&'
 b'\xeb\x90\x8c\xbd\xcag\xd3\xf4\xac\xeb\xf2\x89\xe08\x1c\xa8\xfe\xde\xc0\xb8'
 b'\xee9,\xee\x8a\xae=:\x0ff\x85\x87\x92\t\x00M\xee:\xd2\xf3\x8a\x93\x86b'
 b'_\xcc\xfb\xed\x8ez\xf1\xe8i?\xbb\xb1\x83\x06\xf3\x82\xbb\xb8\xb7"'
 b'\x9b\xde\x8b\xf7y\x1b\xfb\xf6\xa9::\xf2\xbe\x7f=\xf6h\x975\x99j\t\xc2{'
 b'\xde\xbf\xd6\xd74\xe8HL\xd4\x96cR%\xe9U;5\xd24c\xa90"\xaf\x90\x85\x06\xb1'
 b'7c\xed=\xca\x01\xee\x04\xc9\xd9[\xb4/N]\x9c\xa8\xb9\xf8\x15\xd0\xee\xefc'
 b'\xee\x9f\xdcV\xb7\xdd\xe5\xa5\xac]\xdbD\x18\xb1,\x18\xda\ta\xe3\xb2\xfax\xcf'
 b'\xcb\xadf\xb1\x03,\x19\xbe\xbe\n!\x90L\xa2\xa2\xc0\x9b\x81\xd1\xf4'
 b'\x82K\xff\x02\xf0=\x18Pms\xdb1y\xaa|\x87\x908r\x0b&cz\xf9l\x91\x9af'
 b'f\x13A\xa0r\xaf\x8c\xbfoY\x95\x92\xcb\x19\x12Yy\x90\xe3#X\x86T\xf3h\x08\x02x'
 b'\xb3\x15\x9bax\xdc\xad\xc3,\xe5\xdf\x9b\xa0\x7f\x9eG\x9c\xf3\xb5\xc3'
 b'\x9d\xe9\xb5\x94\xdb\xea\xf3t\x93\xea\xd6\xb9\x80\xb6c=\xd7P\nr'
 b'\x11\xd0\x1d\x03\x91\x8cJq\x18\x074|\xb2\xd1\x19\xe2\x90W\xe3s\xf3\tAi'
 b'd\xd9_\xb8d\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t\xf6fP\xdd\xd7j\x86\x03'
 b'\x18)/\x87\tWVs\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b'
 b'>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L'
 b'\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e'
 b'\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_TransferToken = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\xba\xf0\xef6\x83^\x9d\x1f\x19\xcf\xd9&'
 b'\x8b\xe0*\xf0\x16\xb2`/\xc17y["\xc6\x85y\x19\x91\x89\x90\xa4\\Y/[yc\x90'
 b'\xda\xa4}\xde\x92\xb15\x9e\xe2\x18]g\x13I2z\x86\xbe\xc7\x8a}[\x8cg'
 b'h\xd4\xc4\x18\x0e""\xbf\x06<8\x96I\x0e\x98\xc8\x00\x19\xa8\xf9'
 b'\xbf\x91\xf4\x80\x1b\x810])\xf9\x96\xf7\x8e\x03[\xcd\x1cE"I\x1e~B\xa5'
 b'\x01\xc1D\xd8?\xa3T\x94\x98X \xe6\xe7\xab\xff\xc3\x8d\x8a\xd4H\x10\xe82\x95'
 b'\x8fZQ\x13\x98\xb8f\xc0\xba3_\x84m\xc1\xe0\xdd\x8ah\xbe=\x88\xa6\x151'
 b'\x9aT\xe0m\xcc*&\xba]\xe1\xafZ\xea\xbc\xba\xc6\xab\x9d\x16&Fhe\x8f\tX\xf2I'
 b'\xc9\x93\x8e8,\xc6`\n\xcd?\x84\xac\x96twF\xd0CUEF>Owb\x89j\xdf\x8aK\xe0\xbc'
 b'\x0c\xd1{Q\x97\xe1\x0e?\x0f&u\x82\xf7^\x8ei\x82[V\x00L\xfd\x85\x1f'
 b'o\xcc\x0e\xd7<./Q\x03\x12\x86\x95\xff \xda,\x93\xce\xb8\xc8\xeeN\xe8\xd8'
 b'\x04\xa6\x11)\x16\xa0\xbe\x0c\xd1,:@\xe4`\x0e/L\x0b\x01\xe8\xbe*7\xf1.d{\xb5'
 b"\xa0'\x14.7\x81\xb7\xe6BKF$\xef\xe7\xbd\x0e\x13\xad\xb0\x0fA\xb4\xfb\xed"
 b'\xd8^P,\x89\x1do\\<\x9a\xf8\x89\x13\xa2s(\xbfR\xee\x0c\xe7K\x1e\x90'
 b"\xcb\xc5\x17\x15\xffD\xc8\xaaS'\xc5\xa3!\x14/\xf6\x1c\x1e,p\xefzmL"
 b'\xc1x\x83\x97\xab\xa7\x08\xef\xaff\x8al~\xa45\xf2{\xd6\xc7\xd7'
 b'\xd7\x1b\xdf\x80\x9c\x18\xabk\xa3\xb2\x08b9y<\x91 \x97\x9b\xc9\xfc\t\xa59'
 b'\xe8\xb6*\xa9f\xa5\x9f\xd6\xaa5\xc4S\xce)\xd3\x06\xc3u\xa9^\xad.~\x1dP\x1e2G'
 b'\xbb1\xdf\xbc\xdd\x82pD\x1d\x08\xa7\xdda\x81\x88l\x18Y\xef,\x90\xd3\x16\x16'
 b"\x87sy\xcb{\xbfX\xb9\xecL\\QH.\xba\x88\x8af:)K\x11\x85\x80'\xe9<m"
 b' \xba\x0c\xc0(\x14G ;\x1caYN\xed\xcb\xa4\x9cct\xb6\x01\xd6\xc0\x97\xf0^\xe1.'
 b'j\x9fX\xd5\x1a\xdf\xa8\xd2\x13\x1fTU\xe9\xfb\xa4\x84o\xf6664#\xa2\xd4'
 b'\xeaWR\xceLX;\x08f\x9b\xa4\xaa"\xabC\xe5\x8d#\x94\xbb\x86\xb1\x14,'
 b'\xbd\xfcV\xf0\xbf\xcd\x1e\x13\xf2E\x87\x97\xc1\xa6\x98\x9c^\xdac-'
 b'\xe2\xe4\x9f\x9d7(\x17\xf5\x92\xbe,z\x0f\xe3\xaes\x05\x88>\xe9BW5\x8e'
 b'2\xda\x11I\xb0\xc1\x19\x0f@x\x8e\xc8@x\xe9/\xf1\x8a\xf9\xb2RZ\x04\xd1'
 b'\xea\xf9\nW\x1e\xaa\x06b\n\xfc\xf3\xed-q\x9a\x9a\x94\xdc*\xcc\xcfX8['
 b'\x90e\xc3\xa1\xab\xe2\x84\xaf\xc8\xc9{\xea\x93\xf0\x83z\xd3\xf3\x01\xe5!$5w'
 b'\x85\xadd\xcf\x0e\xd2\r\x19\x0f\xdc\x02*B\xce\t\r\x0b\xbc\xd7yT)\xe2h'
 b'\xdb\xf2\xd1U/`\xad\x0b~\xdd%L\xf4T\xcd \x7f\xc3K\x13\x0b~\xa8\x96'
 b'\xbd\x83"\xd9\x13\x0bN\x00\xac\xed*\x08\xa2\x01\xf5\x84\t\xc5\x8a\xc3'
 b'\r\xf8\x9e\xb1\x1d\x1eE0\xd9L\t\x15\xeb\xd4\r\xe7f\xd2\xb7\xd4\x89{*\xd8'
 b'{\xe8\xba2j\x1a\x17\xcdj\xcd\x08\xaa\xda7\n\xfed\x89\xec(\xf8\xb3\xde\x96'
 b'\xaf\xe4\xec\x8b0W\x9a4\xb5\xebj`\xfb\xfd9\xcdFiI\xf5\xb7\xce\x95\xd5'
 b"\xa9\xa0\xc5#\xc6z\xf6o\x05\x0c)\xd1\xc2\x1c\xf7O\x9b\x8f\xe5'"
 b'\x87\xd7\xe4\x1a\xd9.K#\xe7\x0f\xdb=E\xfb\xfaX|\x15T\x96\x02 \xab\x7f'
 b'V\xb8W\xbb\x18\x8f\xaf\x9f\xed\xccw\x7f\x96\x85\xed{\x8bag\xcb\x00\xfe\xe0_'
 b'\xbf\xb9\xad\x80\xcf\xa6}\n\x15\x97j\x9f\x8e\xd4\x19T6\xec\xac\x05'
 b'\x9ak\xd1\x19/\xa1U\xc5\x04\xd8\xe1\x81\xa1\xdfqb\xa1P\xedCJ/=tI\x06{\xc4'
 b'$d\xab\xc49\xc6^R\xec\xa2\x92Q5o_j\xdc\xaf\x85K\xca\xd5\xfe\xd4\xfe\x1fZ\xdf'
 b'\xc1%;\xdePQH\xe6\x84\xea\xb6\xe1BR\xc9B\x9a\x9d\x05\xa7q\xfa\xe6\t'
 b'w\xc3\xef\xd1\x18\x02tbV\xfe~\xf4\xd2),J*\xcc\xe7\xa8v{$\xec\xd0\x07F\x1e'
 b'hh!\xfbI\x99 @\xccK\xfc\xdf\xd6\xe6\xd7\xf8\xcd\xb1o\x89\xe6\xf4\xc4\xf6'
 b'ZN\xa2\xca!^\x14w\x1c\x0bK|\xde\x1b\x15\xed\xd8\xcf\xc79#\xd0\xfe9\xe3Lc\x8e'
 b'\xf0\xa5$h\x17d\xc1A\x7f\xfaw\x80]\xce\x05J\xb7\xb3>X\xe6{\xcb\x02'
 b'\x0bh\xa6\xb7\x84.\xfa\xf3\xb0\xcbs\x0bnk\xdf\xf8\x180\x93\x0f\xbf\xfez8'
 b"'Td\x16\xea\x01\xf6\xfde\x10\x07\xd2\x01{\x86\x1d:b^\xb4\xc7\x185fg(\xe4\xd6"
 b'3E5/\x17\xff`\xc8\xa5\xbd\xc7\xa5_ix\n\xf5\xc3\xd4]\x1a\xba\xb3\x9c'
 b'\xf8-\xb3\x10\xb0\xd9=0\x9cDo\xa6\x02\xbc\xde\xd7&\xf6v \x15\xee\xea8'
 b'\xd0\xfc\xa7\xb2]jhJ\xb6s\x8d\xbfM\\:\x97\xb6\t\x08\x18q=\xd7RI\xd7\xfb\x14'
 b'\xd3K\xe7)\xbd\xf9$\x04\x84\x19*BxN\x08\x0fjf\x8ck\xda\xb6\xf30\xadlN8'
 b'|\xf2\xfc\xa5\xa3\xb7\x1d\xc5\xf4\x962\x13\x04\x1c\xa3\xf3F\xeb\x99b'
 b"'\xdc\x85\n\t$c\xc4\xc2\xe5\x0570\xf3\xa0\x08}\xcd\\\xde\x80\xb3\xfa\x0e"
 b'\xeee5S\x85\x9d7\xf8d\xcd\xa7\x9b\xb2\xa6\x1b\xf0x\xc7)\xc2\xdf\xef\xfe\t'
 b'\xa5\xf5\x88\xc2\x15\x00[\xf37n0b\r\x0cT\xccS_\x1f\xa7l"d\xd1'
 b'\x15\x01\x14\xa6\xddZ&U\xbdK+\x05#\xe0R&\xb5\x15\xe2\xdfB\xf1\r\x9f'
 b'\xfe\xc66/\xfe\xd7!\'\x98]4\x08\xe3\xdbajM1\xc3\xb2\xbb\x8fd\xba\xec#"\x06'
 b"\xb8\x04\xce\xb9\xa1\x1a'\xe6\xbdE\x98\xd4v\x1e\xbd\x8d_Rt\xeeQ\xcc^s"
 b'r\xa3\xd7\xd9\xd4\xb4/t\x0c\x05\xf8\x19\xfb\x1f\xe6\x14q\xea\x8c\xa5'
 b"x\xc2U\xbb*\xad\xa7Z5WU\t\xfc\xdd\ra\xc0/'\xd0\xfb\x00\x0f~\x8f\nj\x9e"
 b'mu@\xb3\xe3a\x9f\x18\x99\x17xS\xb7&\nEI\xeb\x8fbx\xe7\xaf\xd9\x98\xaa[\x9e'
 b"\x03\xe6\x8ev\x85\x9c-\x05\xe7^\xf4\x0b\xdd\x10\xe4'\xdbT\xe8V\x8b0\xd3;"
 b'\xd8\xb3|\x94\xf0C"\xe5X)\xcaL\x0c\x0bned\xb6\xcc\xbf\xd3\xfc\xfd\x1d'
 b'z\xab\x96\xc3m\xec\xa8\xc9\xa8\xac\xdd\x81\x8a\xc4V\xc9\r\x1b\xa0\xd0'
 b'\xcc2\xef{\x1a|\xbe\xd75\x02\xc0\xd7\xab\xa1vsy\x1c\xcbN\x84\x1a\xba\xec'
 b'\x1c<\xe9\xe7\x88\xff!\x11n7\x9b"]\x05$%c\xbe\x05\x94\x99\xf1\xd3\xdd'
 b'\xdc\x91,:\xfb\x8e\xc5\x15\x7f\xa8\x1f\x87\x19\xde\x91\x9d\x8e\xdf\x0c\xc9'
 b'^!"<\x00d\xbaE\xab*\xcc\x98<\x81\xcd\xa0\xf52}\x80\xbb\xfe\xd3$:\xad\x1cr'
 b'\x8c\xc9\x13\xff^\x91\xce\xf0Ry>\x88\x15\xea\x8d\x83{b\x87]\xb7> \xb1'
 b'\xd9\xf6\xc5\xf9G\x7f/\xc6l\xca\x06w\x9f\x87\xf3\\\xf6\x8e\xa7\\'
 b'\xde\xdb$\xec\x14i[\x88\x06Qt\xc6\x00\x1e\x99\xe1_c\x14\x00\x81\xc2.\x9d'
 b"\x8b\x98'0\xa1\xee_\xb8q/h\xbd\xb7PB9yB\x1a\xa8\xa6]\x7f\xbbinb\xca"
 b'\x0f\xa3\xe9F\xba\x86\x1as\xb5\xc4o\xac\xea\x19\xfb\x01\x0c\xc9x\x00'
 b"\xec,\xa1lP\xfalU'\x9f\x05\xa7\xcc+\xd0~M:\x7f\xfa\xfe\xa6\x19\x86"
 b'\xe3\xfe\xc3\xf8\xc6J\x8cz\xf7>\xf9z2 \x979\x89AN\x05\xe4\xc8\xc1\xcc'
 b'\x9ah\xce\x0f\xc6&s\xf7p\xb2i\x18\x94\x19>\xae\x05FR\xd0\x9bc\xc6\xf8'
 b'T\x86\xbf\xca\xcb\xdf\xd1iMk\x0b\xa6x.\xef\xf9\xde\xaf`\xd3mA#\x1e'
 b'\x91\x98\xb4\xef\xbbI\xe7P\x89\xaa\xed($\xe2X4\x1b\xa1\xdf\x82V\xbb\xe4\xe1'
 b'\x8a\xedy\xc3\xd1\xbb\x01"\xf2> l5 ,T\x877L\xc0\n\x82f\xe4\x95Yb\x9f'
 b'\xa2?\x86\xa5YTf\x82o\xc3$D\x18d\xa8.\xf3\x15\xa0\xed\x90\xf4H\xa6)\xe5E\xfe'
 b'Z\xbbp\xb4Z\xe8\xbb\x80(|\x85\x0e\xd4\x0e\xe0yd\xe7\x01\xc7m\x92\x1a\xf0'
 b'\xcdF\xa2\x8f\x8byz?\x04m\xe3\xfa\xa7\x90\x9a\xe4<\x11C\xe06`\x9c\xc2T\x9c1]'
 b"\xd7\xe7\x16\x93'\xff\xde\xa3\xd3\xca\xcey\x9fk\xf5X\xf4\xd2\x193"
 b"\x9d\xab\xc7\x9br\\\x80\xfd5\xfc\x8b\xe9\x8d\x9b'U\x92\xfb\x84+K8\xa1\xcb"
 b"\xd9'\xd8\x13f\x13A\xa0r\xaf\x8c\xbfoY\x95\x92\xcb\x19\x12Yy\x90\xe3#"
 b'X\x86T\xf3h\x08\x02x\xb3\x15\x9ba7\xc3FRJb\xc6\x01`\x19\xf9\x942\r\xb4\xd2'
 b'\x9b\x98\x96_\xe5k\xc2k\xedD\xa5V?\xaf\xe9\x8f~\xf5\xbf\xab\xc6\xb2\xc8\xd9'
 b'\xdd\xad\x1a\xf6\xd1\x82\xe6\x9fQ?\xa0\x877\xe6{\x8a\x9f\xbe\x12\x19'
 b'Uf\x13\x07d\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t\xf6fP\xdd\xd7j\x86\x03'
 b'\x18)/\x87\tWVs\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b'
 b'>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L'
 b'\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e'
 b'\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')


# TODO: Do the same for Lattice and Duplicate
# TODO: Write test to check after signing (before is there)
# TODO: Fix problems with verifications (positive and negative checks)
# TODO: Check corner cases, parameter boundaries

wrap_message_expected1 = bytearray(b'\xff\x00\x0000000027\x00{"data": 12345, "type": "TESTKEY_1234"}\x00\x00\xff')
wrap_message_expected1b = bytearray(b'\xff\x00\x0000000027\x00{"type": "TESTKEY_1234", "data": 12345}\x00\x00\xff')


class TestSimpleTransaction(TestCase):

    def __init__(self, *args, **kwargs):
        super(TestSimpleTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):
        # Alice sending coins to Bob
        tx = TransferTransaction.create(addr_from=self.alice.get_address(),
                                        addr_to=self.bob.get_address(),
                                        amount=100,
                                        fee=1,
                                        xmss_pk=self.alice.pk())
        self.assertTrue(tx)

    def test_create_negative_amount(self):
        with self.assertRaises(ValueError):
            TransferTransaction.create(addr_from=self.alice.get_address(),
                                       addr_to=self.bob.get_address(),
                                       amount=-100,
                                       fee=1,
                                       xmss_pk=self.alice.pk())

    def test_create_negative_fee(self):
        with self.assertRaises(ValueError):
            TransferTransaction.create(addr_from=self.alice.get_address(),
                                       addr_to=self.bob.get_address(),
                                       amount=-100,
                                       fee=-1,
                                       xmss_pk=self.alice.pk())

    def test_to_json(self):
        tx = TransferTransaction.create(addr_from=self.alice.get_address(),
                                        addr_to=self.bob.get_address(),
                                        amount=100,
                                        fee=1,
                                        xmss_pk=self.alice.pk())
        txjson = tx.to_json()

        self.assertEqual(json.loads(test_json_Simple), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_Simple)
        tx.sign(self.alice)
        self.assertIsInstance(tx, TransferTransaction)
        self.assertEqual(tx.subtype, qrl_pb2.Transaction.TRANSFER)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual('b1301d3594083f83c413dd0acabd8d590124054f5057984548556fe14118f714', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_Simple, tx.signature)

        # Test that specific content was copied over.
        self.assertEqual(b'Qfd5d64455903b8e500a14cafb1c4ea95a1f97562aaaa24d83e5b9dc3861a47386ce9ad15', tx.txto)
        self.assertEqual(100, tx.amount)
        self.assertEqual(1, tx.fee)

    def test_validate_tx(self):
        # If we change amount, fee, txfrom, txto, (maybe include xmss stuff) txhash should change.
        tx = TransferTransaction.create(addr_from=self.alice.get_address(),
                                        addr_to=self.bob.get_address(),
                                        amount=100,
                                        fee=1,
                                        xmss_pk=self.alice.pk())

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We have not touched the tx: validation should pass.
        self.assertTrue(tx.validate_or_raise())

    def test_state_validate_tx(self):
        # Test balance not enough
        # Test negative tx amounts
        pass


class TestStakeTransaction(TestCase):
    def __init__(self, *args, **kwargs):
        super(TestStakeTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))
        self.assertTrue(tx)

    def test_to_json(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))
        txjson = tx.to_json()
        self.assertEqual(json.loads(test_json_Stake), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_Stake)
        tx.sign(self.alice)
        self.assertIsInstance(tx, StakeTransaction)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual('cec824415e53e8dc58948f24ffab86436c9a890e356c77dc1084611cdfec20d1', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_Stake, tx.signature)

        # Test that specific content was copied over.
        self.assertEqual(2, tx.activation_blocknumber)
        self.assertEqual('380793debf8f72e70ef7351ee5005df6c7ca2320ff49e0ead0c40b19c7bb1cc1'
                         '496e19a482c06350bdc054e4ed52a24ec8c994c44f9341d01190a81ab093ade8',
                         bin2hstr(tx.slave_public_key))
        self.assertEqual('1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8',
                         bin2hstr(tx.hash))

    def test_validate_tx(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We haven't touched the tx: validation should pass
        self.assertTrue(tx.validate_or_raise())

    def test_get_message_hash(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))

        # Currently, a Transaction's message is always blank (what is it used for?)
        self.assertEqual('cec824415e53e8dc58948f24ffab86436c9a890e356c77dc1084611cdfec20d1',
                         bin2hstr(tuple(tx.get_message_hash())))


class TestCoinBase(TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCoinBase, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.alice.set_index(11)

        self.mock_blockheader = Mock(spec=BlockHeader)
        self.mock_blockheader.stake_selector = self.alice.get_address()
        self.mock_blockheader.block_reward = 50
        self.mock_blockheader.fee_reward = 40
        self.mock_blockheader.prev_blockheaderhash = sha256(b'prev_headerhash')
        self.mock_blockheader.block_number = 1
        self.mock_blockheader.headerhash = sha256(b'headerhash')

        self.maxDiff = None

    def test_create(self):
        tx = CoinBase.create(self.mock_blockheader, self.alice)
        self.assertIsInstance(tx, CoinBase)

    def test_to_json(self):
        tx = CoinBase.create(self.mock_blockheader, self.alice)
        txjson = tx.to_json()
        self.assertEqual(json.loads(test_json_CoinBase), json.loads(txjson))

    def test_from_txdict(self):
        tx = CoinBase.create(self.mock_blockheader, self.alice)
        tx.sign(self.alice)
        self.assertIsInstance(tx, CoinBase)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(11, tx.ots_key)
        self.assertEqual(test_signature_CoinBase, tx.signature)

        self.assertEqual('0d6631ec8d7dd328c6309588e24db5fa5d411a50d53ad622f4ed489c7fab69c8', bin2hstr(tx.txhash))

        # Test that specific content was copied over.
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txto)
        self.assertEqual(tx.amount, 90)


class TestVote(TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVote, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.alice.set_index(11)

        self.addr_from = self.alice.get_address()
        self.blocknumber = 10
        self.headerhash = sha256(b'headerhash')

        self.maxDiff = None

    def test_create(self):
        tx = Vote.create(self.blocknumber, self.headerhash, self.alice)
        self.assertIsInstance(tx, Vote)

    def test_to_json(self):
        tx = Vote.create(self.blocknumber, self.headerhash, self.alice)
        txjson = tx.to_json()
        self.assertEqual(json.loads(test_json_Vote), json.loads(txjson))

    def test_from_txdict(self):
        tx = Vote.create(self.blocknumber, self.headerhash, self.alice)
        tx.sign(self.alice)
        self.assertIsInstance(tx, Vote)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(11, tx.ots_key)
        self.assertEqual(test_signature_Vote, tx.signature)

        self.assertEqual('2e55244675096d889d3fa84f580e51b7eed4edd772fbef8fa73e478164a295de', bin2hstr(tx.txhash))


class TestTokenTransaction(TestCase):

    def __init__(self, *args, **kwargs):
        super(TestTokenTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):
        # Alice creates Token
        initial_balances = list()
        initial_balances.append(qrl_pb2.AddressAmount(address=self.alice.get_address(),
                                                      amount=400000000))
        initial_balances.append(qrl_pb2.AddressAmount(address=self.bob.get_address(),
                                                      amount=200000000))
        tx = TokenTransaction.create(addr_from=self.alice.get_address(),
                                     symbol=b'QRL',
                                     name=b'Quantum Resistant Ledger',
                                     owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                     decimals=4,
                                     initial_balances=initial_balances,
                                     fee=1,
                                     xmss_pk=self.alice.pk())
        self.assertTrue(tx)

    def test_create_negative_fee(self):
        with self.assertRaises(ValueError):
            TokenTransaction.create(addr_from=self.alice.get_address(),
                                    symbol=b'QRL',
                                    name=b'Quantum Resistant Ledger',
                                    owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                    decimals=4,
                                    initial_balances=[],
                                    fee=-1,
                                    xmss_pk=self.alice.pk())

    def test_to_json(self):
        initial_balances = list()
        initial_balances.append(qrl_pb2.AddressAmount(address=self.alice.get_address(),
                                                      amount=400000000))
        initial_balances.append(qrl_pb2.AddressAmount(address=self.bob.get_address(),
                                                      amount=200000000))
        tx = TokenTransaction.create(addr_from=self.alice.get_address(),
                                     symbol=b'QRL',
                                     name=b'Quantum Resistant Ledger',
                                     owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                     decimals=4,
                                     initial_balances=initial_balances,
                                     fee=1,
                                     xmss_pk=self.alice.pk())
        txjson = tx.to_json()

        self.assertEqual(json.loads(test_json_Token), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_Token)
        tx.sign(self.alice)
        self.assertIsInstance(tx, TokenTransaction)
        self.assertEqual(tx.subtype, qrl_pb2.Transaction.TOKEN)

        # Test that common Transaction components were copied over.
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(b'QRL', tx.symbol)
        self.assertEqual(b'Quantum Resistant Ledger', tx.name)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.owner)
        self.assertEqual('06f9d2a299b1b742e30935aad1ff4044ed784dafe610b5ba307a1267ab3f502a', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_Token, tx.signature)

        total_supply = 0
        for initial_balance in tx.initial_balances:
            total_supply += initial_balance.amount
        self.assertEqual(600000000, total_supply)

        self.assertEqual(1, tx.fee)

    def test_validate_tx(self):
        initial_balances = list()
        initial_balances.append(qrl_pb2.AddressAmount(address=self.alice.get_address(),
                                                      amount=400000000))
        initial_balances.append(qrl_pb2.AddressAmount(address=self.bob.get_address(),
                                                      amount=200000000))
        tx = TokenTransaction.create(addr_from=self.alice.get_address(),
                                     symbol=b'QRL',
                                     name=b'Quantum Resistant Ledger',
                                     owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                     decimals=4,
                                     initial_balances=initial_balances,
                                     fee=1,
                                     xmss_pk=self.alice.pk())

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We have not touched the tx: validation should pass.
        self.assertTrue(tx.validate_or_raise())

    def test_state_validate_tx(self):
        # Test balance not enough
        # Test negative tx amounts
        pass


class TestTransferTokenTransaction(TestCase):

    def __init__(self, *args, **kwargs):
        super(TestTransferTokenTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):

        tx = TransferTokenTransaction.create(addr_from=self.alice.get_address(),
                                             token_txhash=b'000000000000000',
                                             addr_to=self.bob.get_address(),
                                             amount=200000,
                                             fee=1,
                                             xmss_pk=self.alice.pk())
        self.assertTrue(tx)

    def test_to_json(self):
        tx = TransferTokenTransaction.create(addr_from=self.alice.get_address(),
                                             token_txhash=b'000000000000000',
                                             addr_to=self.bob.get_address(),
                                             amount=200000,
                                             fee=1,
                                             xmss_pk=self.alice.pk())
        txjson = tx.to_json()

        self.assertEqual(json.loads(test_json_TransferToken), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_TransferToken)
        tx.sign(self.alice)

        self.assertIsInstance(tx, TransferTokenTransaction)
        self.assertEqual(tx.subtype, qrl_pb2.Transaction.TRANSFERTOKEN)

        # Test that common Transaction components were copied over.
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(b'000000000000000', tx.token_txhash)
        self.assertEqual(200000, tx.amount)
        self.assertEqual('5ca79abbf81eb45a0196d8c94f8ad2e94a3fc701745b91a1bb3f559024ee0781', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_TransferToken, tx.signature)

        self.assertEqual(1, tx.fee)

    def test_validate_tx(self):
        tx = TransferTokenTransaction.create(addr_from=self.alice.get_address(),
                                             token_txhash=b'000000000000000',
                                             addr_to=self.bob.get_address(),
                                             amount=200000,
                                             fee=1,
                                             xmss_pk=self.alice.pk())

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We have not touched the tx: validation should pass.
        self.assertTrue(tx.validate_or_raise())

    def test_state_validate_tx(self):
        # Test balance not enough
        # Test negative tx amounts
        pass
