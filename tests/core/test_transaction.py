from unittest import TestCase

import simplejson as json
from mock import Mock
from pyqrllib.pyqrllib import bin2hstr

from qrl.core import logger
from qrl.core.BlockHeader import BlockHeader
from qrl.core.Transaction import Transaction, TransferTransaction, StakeTransaction, CoinBase, Vote, TokenTransaction, TransferTokenTransaction
from qrl.crypto.misc import sha256
from qrl.crypto.xmss import XMSS
from qrl.generated import qrl_pb2

logger.initialize_default(force_console_output=True)

test_json_Simple = """{
  "type": "TRANSFER",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transfer": {
    "addrTo": "UWZkNWQ2NDQ1NTkwM2I4ZTUwMGExNGNhZmIxYzRlYTk1YTFmOTc1NjJhYWFhMjRkODNlNWI5ZGMzODYxYTQ3Mzg2Y2U5YWQxNQ==",
    "amount": "100",
    "fee": "1"
  }
}"""

test_json_Stake = """{
  "type": "STAKE",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "stake": {
    "activationBlocknumber": "2",
    "slavePK": "OAeT3r+PcucO9zUe5QBd9sfKIyD/SeDq0MQLGce7HMFJbhmkgsBjUL3AVOTtUqJOyMmUxE+TQdARkKgasJOt6A==",
    "hash": "H5NgPbU7+tXJI5D3NdDLuGF7SrghSukcVmSj0emwCcg="
  }
}"""

test_json_CoinBase = """{
  "type": "COINBASE",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "coinbase": {
    "addrTo": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
    "amount": "90",
    "blockNumber": "1",
    "headerhash": "cbyk7G3tHwuys91Ox27qL/Y/kPtS8AG7vvGx1bntChk="
  }
}"""

test_json_Vote = """{
  "type": "VOTE",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "vote": {
    "blockNumber": "10",
    "hashHeader": "cbyk7G3tHwuys91Ox27qL/Y/kPtS8AG7vvGx1bntChk="
  }
}"""

test_json_Token = """{
  "type": "TOKEN",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "token": {
    "symbol": "UVJM",
    "name": "UXVhbnR1bSBSZXNpc3RhbnQgTGVkZ2Vy",
    "owner": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
    "decimals": "4",
    "initialBalances": [
      {
        "address": "UTIyM2JjNWU1Yjc4ZWRmZDc3OGIxYmY3MjcwMjA2MWNjMDUzMDEwNzExZmZlZWZiOWQ5NjkzMThiZTVkN2I4NmIwMjFiNzNjMg==",
        "amount": "400000000"
      },
      {
        "address": "UWZkNWQ2NDQ1NTkwM2I4ZTUwMGExNGNhZmIxYzRlYTk1YTFmOTc1NjJhYWFhMjRkODNlNWI5ZGMzODYxYTQ3Mzg2Y2U5YWQxNQ==",
        "amount": "200000000"
      }
    ],
    "fee": "1"
  }
}"""

test_json_TransferToken = """{
  "type": "TRANSFERTOKEN",
  "publicKey": "PFI/nMJvgAhjwANSQ5KAb/bfNzrLTUfMYHtiNl/kq3fPMBjTId99y2U8n3loZz5D0SzCbjRhtfQl/V2XdAD+pQ==",
  "transferToken": {
    "tokenTxhash": "MDAwMDAwMDAwMDAwMDAw",
    "addrTo": "UWZkNWQ2NDQ1NTkwM2I4ZTUwMGExNGNhZmIxYzRlYTk1YTFmOTc1NjJhYWFhMjRkODNlNWI5ZGMzODYxYTQ3Mzg2Y2U5YWQxNQ==",
    "amount": "200000",
    "fee": "1"
  }
}"""

test_signature_Simple = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\x15S\x06=\x88\x86\x9a<:\xb77Jo\xda\xc0f'
 b'\xd1/x\xb1Z\xffi$\x03\xe9Z\x0cC,\xaemp\xe2\xe0\x05\x00UK\xfa\xea\xdb2\xd6'
 b'h\xa9\x18"tb\xffB\xf6\xfb\x1c\xee<\x07\xfa5\x97\x839RV\\B\xf5\xb0;Ci'
 b'O\x8dk\x11or\xcd\x03\x0fP\xd3\\\xea<\x83\xbaw4\xf7B\xe4\x82\x8eA'
 b'\x8e\x03[\xcd\x1cE"I\x1e~B\xa5\x01\xc1D\xd8?\xa3T\x94\x98X \xe6'
 b'\xe7\xab\xff\xc3\x8d\x8a\xd4HW8\xcb\xc6y}#+=\x92[\xa9\x1cH\xae\xad'
 b'I\xff\xec\x97\x03\n\xab\x1e\x96ZS\xa8\xf8\x0f\t0\x0c\xb0\x8dp-\x8b\xe4\xcd'
 b'\x19\x07\xb7$\x87\x82=\xd6\x1f?6u\x8f3P\xbd\x84]\xf4\x03\xa4m\xa6\xa1'
 b'\t\xfd\x9b\x88\xb0\xf8\x12\n\xb3]\xf8\x91\xd7\x1a\xd8\x0e\x1aF\x96\xea'
 b"\xd1\xea\t\xaa',\xcf\x17C\xde\xa20\x1b\xde2:Rr\xcb\x95\xf9\xc0\xb8}"
 b'\xb5&\t\x92-\x92\x90\x0e!]\x99\xd2\xd5\x16$=\xa0\xe58\xf1]\x8f\x7fcq"\x83('
 b'\x0c\xa6\x8d/2\xaek\xc4$\x1e\x92~\xb6\xa2P\x94\xd5a5\x1c\xc8i\xba\xb2'
 b'\xfa\xe7\xa3+\xc7\x1f/\xf6\xa7\xe7\r\x0f\x0f\x8a*\nU\xda\xcek\x08}ADcl[\xb3'
 b'}\xee3P\x08\xa1\xf8t\x97\xd7\x18\xe7\xb8f\xba\x04(\xcc\x15}\n\xd3\xc4\x9c'
 b'b\x1cU.\xbd\xe5ws\xaeN#\xdb\x81\x17\xc5U)O\t!tZ\x8b\x0c\x9dyz\x98D\x85-\xea'
 b"5^{\x0eJ\x98\xd8P\x9b)\xcf_'\xd9\xc8\x1b_W\xf3lwx\xb2H\x142B\xa4"
 b'm\x0e\xc0\x0c~\xfc\x12\xb9\xe9X\xf1u\xe3d.cC\xba\x17xF\xde\xc8\xb5\xbf9a\xef'
 b'\x1e\xd0\x13\x88\x00\xb7E\x142\xf4\xcb\x8e\x16<\x19\xc0\x13\xf4e\xea'
 b'\xc6X\xc2\xa6\n\xf7v\x0f\xf9\xe1\xcd\x97\xb9\x12v`\xc3\x1c\xadG$\x1ed0'
 b'iV+\xfe\x0b\x11^\x03\xa3\xc6\xc0C\xc5\x83\x96~\x99\xfa\x02\xe4'
 b'\xb8\xb9\xd9\xfb\xa16\x8a*\xb9\xe6\xe8\xfe"C\xcd\xa9.\xf5v\xaa\x1a\xe0$#'
 b'\xd4/\xf4~D\x8d\x94b\r\xb6\r\xc5zo\xd9C\xe5\x83\x8f\x9b\xfaM\xf9\xd9'
 b'}\x8f\xcaR\xbb\xd4y\xfb\xa3P(\xb6\xdc\x06\x02\x9b2T\x8c\x15= _\'\xc5R"\x8c'
 b'\xac\t\x0eV7F\xa3p\xa8\x9d\x90y\x80\xf0O\xd5\x00\xdf\x0c\x83\xbd_ji'
 b'\xc19\xd9\xe0O\x97M\x8a\xf7\x87\xa7}\xce@\x8e!\xb5\xda\x80\x10n\xfc\xaa\x1c'
 b'|\x8bg\x9bx\x01$\xfdF\x9b+i\xef\x8fo>\x91\xc2\xa9v\xe0\x8c\xc9\xd9'
 b'\n\xfc\xf3\xed-q\x9a\x9a\x94\xdc*\xcc\xcfX8[\x90e\xc3\xa1\xab\xe2\x84\xaf'
 b'\xc8\xc9{\xea\x93\xf0\x83z\xd3\xf3\x01\xe5!$5w\x85\xadd\xcf\x0e\xd2\r\x19'
 b'\x0f\xdc\x02*B\xce\t\r\x0b\xbc\xd7yT)\xe2h\x7f\x12\xcb\x0c^\x0b\xe4\xb4'
 b'1J\xcf\x99\x00\xe3\xc6o\xeev\x82\xbbX\x14\x88\x9fomu~\x8f\xe2\xb16'
 b'\xfe\xae^\x16\xcb\xc7\xc3qT\xf8(\xa4\xaa\t\n!\x9d\xab\xe3\xc0\xc0|Cz'
 b'\xebF\xa4#4T\xd8\xb3h,\x10e\xdc\xb0e\x1f\x8a\'\t\x99\xe0{"\n\xfd\xdam\x16'
 b'\xaf\xd0\xf0\xf9\rM\x0b\xfb\x8b\x1bHi\xd8LXv\xc43\x01\x07\x92Z\x08\x1a'
 b'\xe2\x08c\xddLv\xde\xf9\x83g\xfa+\xe6\x1fWU;\xcfO\x04oX\xf5\x81UBP\x81'
 b'\xac-j\xb4}\xa7\x07,5\x04\xa4[\xc3_\xb9\xba\x11-T\xe6\xdc\x0f\x93>,!\xdc\xfa'
 b'`=T\x8d\xe6s\x00n\xca\xc1v\xe4\xcf\x97Z\rh\x12:,3N\xc6E\xd37\x1e[yH\x10E'
 b'\xdaS\xb5\xeb^\xa5<\xe1\x95\xa9\x1b\xe6\xa6\xf8\x87\xef\x0b\xc6\xa0\xb5'
 b'\xe6Lc]y\xbb\x98+\xad4:I\xc3\xf3\r2\x1f\x03\xb49)X\x1f\xc4\xe63\x16\xb7'
 b'\xfe\xb2\x10\xe8\xf3\x05\xc7\xb5\xde9\x0f\x80\xb7\x1f\xa5\x05'
 b'\x82\xd1\x17\x9c\xf4\x95i=+F\xd4M\xaa$\xd1\x08VB\x1a\xd8^\xe4;\x82'
 b'\xcd\x1b\xe5L\xcc0-\x99\x98\x83\xdb2\r\xf1\x9e\xba\x06\xcc\xcc\x92'
 b'\x99\xa5?\x0e\xe78Z\xe04a\x13\x1d\xa5\x13\x1a|\x1a\x0b\x17\xe6\xebj\xf3g'
 b'\x90\xf8\x81\xd7\x1e;:]\xabN^\xf7\x93B9\xcf:1\xae\xae\xf6s\x16W\xd8\xcf\xc79'
 b'#\xd0\xfe9\xe3Lc\x8e\xf0\xa5$h\x17d\xc1A\x7f\xfaw\x80]\xce\x05J\xb7\xb3>X'
 b'\xa6\xc6\xb5\xd9\xbai\xad9\xf1dN\xf4\x8dkE\x18\xaf\xdb\xad\x94>\x06.\x0c'
 b'\x81\x9a\x92j\x86\x94^\xba2^\xdc\xb8\x18\x07\xc3?\x10\xaa \xbc"\x1b\x12O'
 b'E&C\x83I\xae\x92\x0cU\xea~\x11\xc7O\xd4\xb7\x00\xef\xc72^\x1d\x92\x94'
 b'A[\xae\xd6\x11\x95\x849\xd3N\xb9Yk\xee\x83\xd6R\xf4\x93\xf5\xb4\xcb\xe7\xb3'
 b'&\xf6v \x15\xee\xea8\xd0\xfc\xa7\xb2]jhJ\xb6s\x8d\xbfM\\:\x97\xb6\t\x08\x18'
 b'q=\xd7R\x8e\xa3\xb9\x9c\x0fJ\xcf\xf7\xcbQ\xba\x02g\xcb?\xd5\xebl.\x14'
 b'\x0fA\xd6\x83\x16\xfc\x9fva\x19\x02z#\xd2Q\xdc=>K"#\xc6\x16\xbdx\xe1\xaf\x81'
 b'\xfd&\xe7\x7f\xb4\xde\x85C\xb8\x8f\x9d\xb4\x90R\x9bf\x9c`\x8cu'
 b'\xaa\xde\xe7\xd9\xee6\xca6\xcd\x9a\x17LL\xa9\x0fK\xa7\xb3\xb9\xac'
 b'\xc6\xf9\xf8^\xa0\xb8\xc3 \xaf!\xec\x11\xd9\x01\xbau\xc0&\xcd\xe2'
 b'\x82\xa7\x8c\xf36\xcc\x0f\xe0s/\xc3G\xb9\xda^\x89\xe1\x85LY\xdeq\x17\xf2'
 b'\x98\xae\xad\x0c\x92\xb3\xef\t\xbb\xdb\xde\xed\xacv\x84\xcb\x98\x04\x1bJ'
 b'\x1b\x1c&H\xed\x15\xaa\xcc2\x8d\x852Fl^\xf3\x18R#c\x99\xee\xc7r\xd5\xfe\xf0i'
 b'm,\xac)\x17\xff\xde(U\x15\x04\xa4\xc3\x02X\x1d\x01c=\x9a\xc9\x05\xb3F'
 b'\xe7\xdc,\xbdM\xf3\x89\x90N\xe8\xb4-\xf6L\\\xd1Z\xe4\xb8\xcfZ\x87\xad\xa1'
 b'aj\x0c\x94E%p\xc3b\x17\xb6\x95a\xcd\xbb\tt\x90\xcc\x1a\xc1\x7f\xdc\x7f'
 b'bMj\xb1W\xc6\x8d\x06\xad@\x85z\x1e\xb6r\xc8\x14\x928\xaf\xbe\x1a\xf2\xdb'
 b'B\xeb{\xb9n\xa7\xc4\xc7\xc9\xe4\xe9e\xa8IO=\x7f\x01\x08W\x95\x9c\xa4K'
 b'\xfc/s\x13~e\xf6\xb5\xd4\xbfw\xbfI \xfc\x9d\xcbT}4J\xd3\xd7\x8aa\xa0\x01`'
 b'/\x0c\x10\xc9!0\x14)?\xf1\xf1\xe1"\x0e\xbb\xcb\xc0\xa5\x9fC\xd3G\xc4\xa9'
 b'\x8cfF\xae%\xa4;\xb1\xb4jev\xc9\xed\x1a\x83\xba\x02\x06\xd3_\xf0!\xa3'
 b'\x19\xbe(\xfe\x0e@HQ\xb1\x10;w\xdf\xca\xbc-%\xe4Ht\x8dQ=\xf3\xd3\x13\xc5\xbb'
 b'M\xd9\xd8nR\xbb\xb0\x98\x99I\x18\xfe\xfb\x14\x1dE\xa7]N\x9d\x93\xa6^\xae'
 b'\xd3\xae\x9a\xa2\xc2\xce\xd0\xda\xc1nhs}s\xd1\xb5G\xac-e\xb4V\x85:'
 b'\xaa\xbd\xaeP\xc6&n\x85\xe3\xf0\xf0\x81\xe6\xa0\x80_\xe1}\x8f_#g\xdf\xb9'
 b'\xb1\x90\xab\xbe\xa8{\xbb}._\x93p\t~\x0c\xbf\xdbs\xc6^\x0cz\x9dig\x87\xc4]'
 b'_X\x8ci\x8cD\x83z(\xc6la\x065\xdb|\x85j:\x8c*?\xb5\xb0\xfb\t2w\x0f\xd7\x14^'
 b'\xc3\x0f\x82\x84\x0f\xe3\xae\x10R^\x9c\x82\x81\\pa\x06Z\x06\x99O\xc2\xccf'
 b'\xb6\xe9\x9f\x9f\xf2\xc2\xd0\x17Z\xb5\x12{C\xebC\xc7\x86\x8f*\xd2'
 b'\xdb\xd9V\xaa\xbf\xe0\x9eeq\xdc\xa8c\xc5\xbd+jN\xffBX\x8e"\x0c\x9a[$\xc8\xb1'
 b'\x14\xa2\xd9\xec0\x17\\\xc0\x19\x125\x15\xf2*\xc3\xd5\xabe\x83\x98\xcc7\xbfO'
 b'\x8cD\xbc\xf1\xcdj\x1a\x1d\x85\x93\x0e\x80m\x8cn\x08\x9b\xd1\xa5P'
 b'\x02\x112\xff5\xe2=\xcc`0{\x99\x80\xe0\xba%\xb1\x8e%u\x9f\xa1\x822qE"!'
 b'\xc3F\x13^\xc42]J\xcfp\xa7\xf3\x90\x0b\x0b*\x8a+G*R\x10\xc8\x1b\x97\xf7\xc4+'
 b'\x16%\xe5\x02\t\xfd_\x9f\xb2%\xe9\x83\x99:\x06H\xa0x\xe0\x9e\x02N+B'
 b'q\xd9\xc8\xb2\x1c\xb8\xf0z\xbam\x04\x9d\x86\xcd:\x7f\x13ZC\x86'
 b'\x9d\xde\xab\xec\xc5\x9eL\x8a\x97i\x9d[n\x174\x86\x16-\x0br\x81\xa9\xfc:'
 b'n\xdd\xcf%\xefD\xd5\x8d&\x17[\x19(\x1a\xe9\xee\x9d\x9c\x9cP\xfe\x91*\xf5'
 b'\x10<\x1735C\x0bU\xd7.3\xff\xa8\xbf\xd3\x1f#8$?\xbaq\x97\x85\x86\xcf\xf5o'
 b'\x05\xe4k\xeff\x13A\xa0r\xaf\x8c\xbfoY\x95\x92\xcb\x19\x12Yy\x90\xe3#'
 b'X\x86T\xf3h\x08\x02x\xb3\x15\x9ba7\xc3FRJb\xc6\x01`\x19\xf9\x942\r\xb4\xd2'
 b'\x9b\x98\x96_\xe5k\xc2k\xedD\xa5V?\xaf\xe9\x8fa\xbf\xf3d\x11TZ\xf1\x85\xed=N'
 b'\xebeOTY\xb2\xfav\x93\x08\x89\xb7\x16\x97\x18\xea\x9c\xe5\x9a$d\x97s\x82'
 b'\xe0^\xfa\x9eIw\xc4\r5\\*t\xf6fP\xdd\xd7j\x86\x03\x18)/\x87\tWVs'
 b'\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h '
 b'\xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN'
 b'\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e\xd6\xe9\x92\x95'
 b'\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_Stake = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\xd5\xfbt.\xd0\x1c-s\xf1Ku\xe5'
 b'\x08\xb3B\xba\x96T\x7fn\xe1\xb8\xfe\x9d&\x01\xb7\xab\xe8\xc4\xa1sHp\xa8\xd0'
 b'(\x1e\xc3\xcc<O\x8bp\xa0\xfa\n\xc3\x1cg\xd0f)\xbcEF6R\x86\xf3p\xc7\xde2'
 b'`\xcd\xfa\xe7C\xea,\xc9P&\x0c2{\xf0\xadL\x85\xb7\x9f\xb1vDK[\x0b\xec\x8c\x8b'
 b'\xc4\x8e\xf8\xf9)\x00q\xf0\xd1M_\xa1e\xaa\xe5\xc7\x15\x11\xc8\xe3'
 b'\xa5\x17\xfd\x8az\x17\x11L\x82\x88\x81(\xc4E)Z\x9bW#%x\xc6;\x05\x90^m\xe2'
 b'\xbb\xb8\xc1\x8b`+\xa8\r\xc0\xf9B\xf1\x1e~R\rEu=\x97\xee`+gnJ[\x02'
 b'\xac\x1f\xd9t2\x07\x914\xe1\xc1\x943\xb6\xaa\x00%\x87\xf6\x0c\x8c'
 b'\xfd\x91\xaatmMn\xbd(\xa1\xab\xa9\xefn\xeb\xd2y\xeb\x1b\xf0\xc0\xc1\x9a\xe0'
 b'n\xcf\xac\xcc\x17\xc9\x91\xfb\r\xd8K\xfcs\xfc]k\xd4\xf2\xfe%\x17O\x00\xd2'
 b'\xf6vX=^\xbf\xb0\x9c\xbcbu\xdb\xb2\xf6|v3rn\x85W\xc4\r@\x90\xf7P\xd4'
 b'7\xe7\xd7!\xba\x18\xaa\xdc\xd9\xa2\xac\xeb#\xc4\x87Z&\xed\x7f\xdb'
 b'9\xb9\x92\xe9\xae\xfd{\x88X\xe2O\x0c\x03-\xd3\n\xa0}\xfa\xb3iA\x7f2'
 b'\x19\x8a\xaep\xac\x95\xaeQ\xc6T"\x16\x89\x1do\\<\x9a\xf8\x89\x13\xa2s('
 b"\xbfR\xee\x0c\xe7K\x1e\x90\xcb\xc5\x17\x15\xffD\xc8\xaaS'\xc5\xa3"
 b'\xd6\xcb;\x95P\xa2T\xe7\x9cz\xbc"\xfb\xc6/){\x03S\x85\xfa\x98o\xa2'
 b'\x8eX\x0f\x1d\xaeK\xc5\x95X\x04\xfe/XV\xd3\x0b\xe8\xc0\x0f\xce'
 b'\x14\xb7\xfb\xf4\x7ft\x0f\x17\x87\xe6\x82\xfcw\xb1_\x1f\x9a\x84(h\xaa5\xc4S'
 b'\xce)\xd3\x06\xc3u\xa9^\xad.~\x1dP\x1e2G\xbb1\xdf\xbc\xdd\x82pD'
 b'\x1d\x08\xa7\xdd\xb5\x9b\xb2y\xc6\x06\xf6\xc5\x02\xf7\x97\xe99\xcayS'
 b'\xcf\x1c\xea\xf6\x10C\xb162\xed`Blb\xdc\xd39)\xb1\x983w?\xce+\xce&X'
 b'\x0f|\x1aZ^\x1a@4\x82\xbe\xb7\xdf\xd0\x82\x9b\xa88s\xd3J\x16\x87\xc9\x8c'
 b"y\xe5\xf3\xbb\x96\x84\xd7:c\xfa>\x11\x1f\xb7'_\x89\x8d\xd7\x1dx\xe0\xe3\xaf"
 b'\xa0f\xa3\xde\xca\xd7\xfc\xa0\t#\xf3n\xd1F\x03\xcd\x00lY\x8bX\xb8\xce\x86'
 b'\x01\xb8\x92\x9a\xb3\xfc\xc9S\x0f\xbb\x15\xf4\xf0\xc0p\x80A$ |p\x0eAf'
 b'\xdc\xac\xbd\x9c\xdd\xf8N\x91n\x94\xc6>\xce]XVU\x1e\x94%\xb5\xda\x80\x10'
 b'n\xfc\xaa\x1c|\x8bg\x9bx\x01$\xfdF\x9b+i\xef\x8fo>\x91\xc2\xa9v'
 b"\xe0\x8c\xc9\xd9\xd2\xc7\xdbLv\xe2!\x14v\xb2\x93'\x0f\x99\x85\xb8K\x8d\xbcJ"
 b'\xef\xe4\x8dR\xab\x98\xc0\xdf\x0b\xc9?\xb5\x18\x1d\xc0}\xa2&\xcc\xed'
 b'\x85L\xc3&Jn\xfc_\nt4\xa1\xa6\xf1\xe7t)\x8fq\x87\xcd[\x8d\xaav\xc9\x89\xa2'
 b'\x9a,\xa8\x99wFBH\x88\xe7d&\x04\xf5nh\x13&\x10\x0f\xda}\x1c\x90\x91LRf'
 b'\xe3XLC\xc1\xfc\xfa:Tx=\xf7\x88\xad\x99\xaa\x83\x86\x02lT*\x99\xca\xf0\x8cv.'
 b"\xa1\xee'\xfd\xa0\x19\x13\xa9W\x93\xd1\xde\x7f\x90\xd6\xec\r\x07\xe1\r"
 b'yA\xb9Zo\x00}\x9f\x83)\x06sY\xc6\x867\xbe.r\x93\xec\x92\x8f\x01-\x9f\xb7\x86'
 b'\x8e<E`\x83\xaa\xb9\x90\x16]<\xd5s\xd1\xf2\xbd\x11\x9bT;oX\xf5\x81UBP\x81'
 b'\xac-j\xb4}\xa7\x07,5\x04\xa4[\xc3_\xb9\xba\x11-T\xe6\xdc\x0f\x93>'
 b'\xda\x14\xe9\x80\xa6\xe7\xac\xf4\x97\x82\xc5\xb3\xb4\xb4I?5x\n>7\xba_6'
 b'2\x039%vcLK\x0f^pm\x03%\x06\xf8\xdd\x12yv5\x87\xba<\xd9\xb1=jE\xfce\xd3'
 b'j<\x14\x07\xf8{\xc1\xd5M\x96\xc5\x16\x9c\xfa\xcc\xaew-\xf2\x96 5\xf5j'
 b'\x93\x12QZz\x83\xd7\x14\xd6v\xd7.\x10\xa7\x9b\xf6\xc7d\xc6l@\xe9\x8c\x06'
 b'\xbf\x80\xa8\t\x95W\x89Pl=\xa1\xf9\xcf\xe4Blx\x86\t\x90\xd33)Gu1c\x02'
 b'\xc8\xe6\xd3U\xef\xc6E\x9be\xa7\xf5\xfc\xf7\xa5\xb3\x9d\xb4\xab\xaa#5y\xed\n'
 b'@\x8e\x1d\xe2A\xbf\x03:\xd3\xc5\x98jU\xcao\x98\x84\xcd\xc8\x9fm-|\x93'
 b't\x18I\xaaR\xa9\xba!V\x1a_\x01-:G)\xe9l\xec\x15\x9c\x91\xf6\xa4\r\x11"J'
 b'\x19H\x8ei\xdb\x87L\x8b\x91\xfa(\x01\xcb\x8b\xa95;I\xabW\x01D\xbe\xdd'
 b'F\xbb\x15\x9e\xb2e\n\xdc/Z[b\x00\xcc\x95\x9a\xa5\xac\xe5\x96\xf6UN4'
 b'\x01\x88\x9e\xe0\xb9\x02\x19I\xac\xd6\x92\x13\xdf\x86\xee\x19\xea\t\x1e;'
 b'\xf9\xd5|\xaa\xfd,j\x04\xe5\x88\xd4\xee\xea\x03\xd9\x04\xa7u\xcc\xd3'
 b'+\xae\x9c. \x0fqaMc\x84\xaa\x0e\xda\xa4\x17\x07p~\xdb\xdd\xdd\x16U'
 b'\xd6&\x89\x0b\n,\xb7\x95\x8c\xc9\x08?\xbe\xd3\x81\x10\xc6Uu\xab'
 b'\xcf\x83\xc2\xce!S\x8d\xb7\xa7\xc5\x88Y\xe9\xa3\x96\x82\x91\xc2D\xf7'
 b'\xaa0\xa2\xde\x08\xb43\x06\xd7\xd4\xf4\xfa\xb3GX9\x94\xcc\xfd\x9bi\xb7L*'
 b'\xee\xf4\xca\x85\x94\x00\xedA!\x8f*\x9e\xa9\x1b\xd2cV\x90\xadYF\xad\x12\xf7'
 b'\x8a\xb0G\xeeE\x162y\x15\xe801S\x14\xe9\xb0\x1d\x85D\x18\xe1\xbcb\xa8'
 b'\xba\x96s\xdf\x91\x93G\x9f\xd82\xf2\xbd\xa4$\xe2\xee\x00\x88\xeb\xc9'
 b'\xf0\xb6\x10,q\xcc5(\xec\x1c\x05\xaf\x85.\xf8T\xdc]\x95\x06\xfau\xc0G'
 b'\xc7\xe5iY\xcf%\x00\xf7\xfd\xcc\xcb\xd5\xe4\xf6\r\xea\xcf\x87\x8f\xfa'
 b'\x04\x7f@ih\x82B\xd6^K)\xd1*iR\xa4\x12\x1c\x1a\xc7\xf0\x98\xcf\xfb@\xe12g'
 b"\xc8\xa9H\xdb'z\x16\xf4\xa4\xa0o\xd2\xf8\xf6J\x7f\x1d]h\xb1\x14\xfa\x9bK"
 b'\x00\xc1\xd1i\x1e\x86\x1d\xd6\xa9\xc4\xf8C#\x99r\xb6s\xa1Y\x0f\x97\xf6\xbfx'
 b'\xd0\xb70{\xfc\x12\xc55\xf2\xf1\xae\x0c\x02_1\xb9Se"\xdf\x9d\x9e\xa4>d/b\xcd'
 b'C&\xfbE\x18\x80\xef7C\xed\xa2\x96p\xdb~#VP(\xc9u\xeaL\xe5-&\xd6\x12N8(!'
 b"\xcd\x99\x8dv\x07(\x89\xaa\xc2\xaa\xbb\xa7r\xa8\x14\x1b\t\xc7^\x16&\xfc'\xf6"
 b'\xb8\xda\xfd\x00\xdevG\xfc\x1f+\xad\xb3\xfa\xbe\xfe\x7f\x89\x8b\xd3\xba'
 b'B\x16f\xb11!\x93;\x99\x1f\x8c\xe3\xc0\x18X|\xd9\xf7\\\x1d\x12\x1c\x04\xf4'
 b'\xee\xd4\x8d\xef-yA)\xf7Z~\xef\xa9\\\xa3\rr\xfeb\xfc\xdc\xc4\x01\x03'
 b'\x155\x9a)E\xe4\x9cQx\xaa\x97\xe9\xb1\x10;w\xdf\xca\xbc-%\xe4Ht\x8dQ=\xf3'
 b'\xd3\x13\xc5\xbbM\xd9\xd8nR\xbb\xb0\x98\x99I\x18\xfe\xfbCL\xb5\x83\xf5<\x91'
 b'1\xb2S\x1e\xf6i\xdd\xdfV\x02\xf0\x88\x03\xe5\xb3E\x8d\xd9\xf5@~X\xca0'
 b'\xf9\xb8\x89\x1e\x90\x9f\x93\xa7]\xa7%A\xcc\xdd\xf1BMI\xdb\x9f\xb2\x99S\x80'
 b'\xc4,#\xcc\x85\x8e$\x19\x14\x04\xc3\xadRm\x8bly\xaf\x89n]6Wa\xf2#\xed"'
 b'\xbc\xe5\xb4\xac\x91\x85Lf,\xdf\xbb\x0fFPD\x964\xcd>Sd\xac\x1e\xdf'
 b'\x9b\x1fx\xb8\xa7}\xea\x8a\x1d\x04\xa6\x9c\xa2\x13\xb293\x8cU1K\xbc\xd3p'
 b')Bz\xd8s\xe1\x01\xfd\xc0nH\xb7\xa0\x7f\x7fC`%\xd5\xb5A\x9b\x13\xd1'
 b'm\xa3\x98\x7f\x86\x8f*\xd2\xdb\xd9V\xaa\xbf\xe0\x9eeq\xdc\xa8c\xc5\xbd+j'
 b'N\xffBX\x8e"\x0c\x9a[$\xc8\xb1+\x92\xb5\xe6\xdcv\xbcc2|F\xda]8\x8eh'
 b'65\x94\xdc4\x00\x7f\x98\xc6wh\x01\x9cmD\x0e\xee9,\xee\x8a\xae=:\x0ff\x85\x87'
 b'\x92\t\x00M\xee:\xd2\xf3\x8a\x93\x86b_\xcc\xfb\xed\x8ez\xf1\xe8i?\xbb\xb1'
 b'\x83\x06\xf3\x82\xbb\xb8\xb7"\x9b\xde\x8b\xf7y\x1b\xfb\xf6\xa9::\xf2'
 b'\xbe\x7f=\xf6h\x975\x99\xffT0\xecB/\xdao\xd0\xb8Oq\t\x87\xe1J_t\xe7g>S\xedb'
 b"H\x8e\xe8\x9eo\xde\t\xc7\xda\x12\x11w\xe9\xc0B\x92\x17\xbb'[\x0b\xad\xeb\xf9"
 b'\xafX\x13v\xc1\xe2\x88\r\x8a\xb5\xe9\xaa\x82\xc4\xb4L\xa9\x89\x0c\xa4'
 b'Y\r\x04\x1eM\x80\xc4Rl\xfe1\x8e\xae\xa8\xcd\xdf\xb9\xa7\xfcb\x83z\xac\xfd'
 b'\xc2\x1d+I\xaa\x93\x14\xe4\x18\x08\xeen#\xf8f\xafQ\xf8Ugw\xda\xe0P'
 b'\xca\xd4\x80\x90\xa3_\xde\xbb\x8a}\xae\x0ff\x13A\xa0r\xaf\x8c\xbfoY\x95\x92'
 b'\xcb\x19\x12Yy\x90\xe3#X\x86T\xf3h\x08\x02x\xb3\x15\x9ba\x07\xeayl\xacLb\x07'
 b'24F+Q\xa0e\x9b\xcdD\xe93\xcc\x076#\xa3\xd25-%\xbci\x8eh\xc0\x8c\xb8'
 b'o\xe1\x9a\xe6u\xb0}\x8c\xe1\xf5\x7f\xaa\\m\x11\xdc\x95\xb1\x08Sgv6\xa0D$@V'
 b'd\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t\xf6fP\xdd\xd7j\x86\x03\x18)/\x87\tWVs'
 b'\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h '
 b'\xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN'
 b'\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e\xd6\xe9\x92\x95'
 b'\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_CoinBase = (
 b'\x00\x00\x00\x0b\x01\xc6\x83\xd8Y\xb4\xf2\x1cC\xe0VK\xe6\xb9X\x03V\xfd\x98?'
 b'Z\xb2\xe2^\xc5\x15s\xc2\xfb+\xd5\x93\xbf#\xfc\x93\xf3\xa1\x15i'
 b'\xf5\xd1\x8e\xaa\xd5\xc74jx\x9f\xd1\xf4\xc3\xbd\xa3\xac-:\xe7\x87'
 b'\xd3i\xb1\x8a+\x93\x10\xe5\xfd/\xe9\x1b\xdd\xcf\xdb\x92\x05\xd6\x13\xdc'
 b'\xfas!\x90\xb2G\xf9\xe5\xd5\xcb\x90\x89\x98<\x15ZBL-\x9eK\x15\x1d\xb8'
 b"\xdeO\xdeD\xe51\x00'Y\xa8\x8d\xb8\x8bFH\x1d\xb20!a\xc3\xd9F\xf0\xc4\xb70L"
 b'\xb5\xc6\x1aN M\x1e\x855\x84\xbb\x7f\xd4\x1e*r\x08\x8e\x0b\x81H\xc0\xe6\t'
 b'P\x01\x8f\x1d\x14\xa1\x04\x9aLX\x15S\xbei\x92:\x83_x\xe7\xce\xba9\xcb'
 b':\xc7\xb4\x11\x9f~\xb3\xa6(,a\xd0\x07\x08\xe4D\xd7\xb1\x91\xea'
 b'\xd6\x01\xbf\x18\x8e\xbe\xae(\x0c@\xa5\xc1\xf5h;\xf9\xc48Z\xb3c\x08\xd0{'
 b'\r\xc30\x07\xf7t\xe1\x12D\xd0;\x9d\xd7\xe8\xfa\xf6\xaeD>Z\x9f\xfc\xb8{'
 b'\xc2\xe1HU\xccy\xc5\xc2I\n\xcanY\xb2}&VV\xfb\xa8\x9avSi\x86\x0f%{\x84[\xa18'
 b'\xb5x7\x0f\xaa\x06\x959\x93X\xea8\xe1e\xd6\x97\x1e2M\x02\xf5\x15\x9a\xb5'
 b'h\x1f\x83\x16;\xa0&\x8b\xc2\xfeB\xcb:\xdd\xf9<\xfe\xc0`\x86$\x05\xd2\xdf'
 b'\x92\x0f\xd0[\x92\x90P2\x11\x10U\xde\xb5d\xd3\xe5\xae.\xf7\x9f-\x12j\xb5oz!I'
 b'\xac\xf4\xb8\x0eh\x87\xdc&^I.\x1b\xb0\x02M,w\x8b\xb3\x9a2e\xc7\x99\xa2,`g'
 b'6P\xd8\xfbg\x00\x11\xd0\xfa\x00\x07m\x1b_D\xcd\xf0\x18\xef\xaa^\xb5\x8f\x19'
 b'\x9a@;b\x1f\xe3\xa6\x0fV\x00\x96+\xcc\x80\t\x04\xd9IL\xcdS1\x1f\xda'
 b'\xf3,\xb5\x83\x08\xb2\xeeT\x16\xc6\x07\x8ep\x8bi\xbac\xc8&x\x0f\x03C\xde'
 b'G\xac\xc1\xc6\xe7Ax\xa6a#U\x04\xbf\xd1\xe6\xaft\x83Sp\xa8\xfaA\x8c'
 b'\x89\xa9\xea\xc6\xa9\x9br\xa6\xc9\xaa\x94\x8d\x0bd_R<\x19|B\xaf\xeb\x88\x07'
 b'7\xf5i\x81\xcc0\xf6\xfd\xf1A\x8cd\x95Ev]Y%\xe5\x88gML\xfc~<\xbb\x0b'
 b'\xaa\xafeF\xc5\xe3\x03\xab%\xcdl\xd4J\xf1\x02X\xe5}\xccf-\xc5\xe6\x9e'
 b'%\xb6!\x7f\xad]\x99~|Q!z~wX=ZL\xaa\xcd@\x83\xe2\x87\x10\x87n\x9c\xb9X#^'
 b'\x03t\xb0\x1d\x9cv)\x9cY\x95\xa0\xe8;]\xc4\xc7\xf8L\xbd\x17\x0c\x17B\x18fDF6'
 b'\xf6\xa6{\xb9\xc6\xa9\xd0\x101 \\\xb9\x16&k$\\\xcf{\xb6\xcb\xae\x1c\x9a'
 b':\r\x95\xc4\x92\x04?J\xa5W\xa7\x94\xaeZn\xba\xb7\xb4R+Vc\xffelYG\xdf\x8b0t~'
 b'\x9bU\xd8\x89C\x10*\x96\xeb\x0f\x83\xc6w\xf2\xd4x\xee\x05\x13\xeb\xfe0,!'
 b"\xf0\x99\xe8n\x1b\x84\x81'\xc1V\xb2\xcf\x08(?\xca\x0c\xdf\xeb\x82"
 b'\xd94\xaa\xd3-\x95\xc1\xdc\xaap\x9cd1oz\x94\xef}WX\x13\xc7j\xdc%Z|d'
 b"\x1a5\xfe~\xcej\xfe'C\x82\xf2\xaf\xc7\xcc\x17\xdb@.)?\x9d\xdf\xfa\xdd"
 b'\xab\xcc\xefR\xf1\xf5\xd6\xdd\xc5+g\xc5\x9e\xe7| \xdeK\xa2nTu\xba@'
 b"\xfbp\x03\x9b?-jOLU\xb6'\x86\x00h\xeb\x95r\x1a\xa8\x15#\x18=\xdb7\xdd\xb0"
 b'\x1ep=)\x8cX;g\xd7\xd9\xd2\xa1rfM\x02[\x8a\x16\xac4\xd0v\xd6|\x0c?@\xcaS{a'
 b'\xc4\x05\xd1\x85\xe4\x12H)\xac|W\xb5\x0fUV\xa0\xdb\x98\x15\xf9'
 b'\xa4\xf9\xac\x1b\xe9\x006\x19\xec6Vc%\xf5M\x13QA[\xf1\x8d\xf4l\xf6\x8c\x1aV@'
 b':\xeb\xfe\xa2\x05\xf9Lt\xcc{\x84<Fkq\x80o\xed\x1b\x9f\xa0\x89\xd2b'
 b'(\xc7\x1e\xdf\xeb\x8c\xe3\xce\x84\xfd\x97\xc8\xafz\xc1\xe9\xb2\x1a\xd0('
 b'"\xc9\xaf\xf0\t\xf7j\xad\xeej\xbe\xba\x1df\xf95\xab\xfdx\x99\xbfq$\x9d'
 b'\xf8lk\x01\xf4\x06\xd0+\xdc5r\x8b\xae\x85|\x8e\xf2\xa0\x06\x05\xea\xe5h\xa5'
 b'\xa0\x9c\x00\x11;\x12xGd\xb9\xe6\xc8\xbbq\x92\x0eu\xbe\x98\xdch\x11J\x0c'
 b'\xb2\xe5\xd5H&P\x11\xc8\x00Vn\x82\xca\x1fF\xb6U1\xd3\xf5m\xa1?n\x9cX\xaaP'
 b'\x80\xcc\x9b}u\x19\x18}Z\x0e\xb1W\x98\xbc\x18%\xfb\xd0<\xba\xd8A\xac\xa1'
 b'\xcb\x18\x0b\x19\xce\xa4\xa2\xbd7\x12x\xa3\x16W$\xb31\xd3\xd4l\xf5\x97\xafp'
 b'\x88\x8d=\xa9\xa1\x1a\xb1\x05\xaee\xa6\x9a\xd5q\xd5\x98\x94A\xb2@A\xeaz\x89'
 b'\xf0\x1bDk\x01\xbfH\xa4k\x8b\x9ao(!G\xc6\x08\xf9\x18"\xf4\xeb\n+\xb1^|\x0b'
 b'\xf0\x8c\x1f\xd3\xa2`x\x15\x17E\xe4\xde\x87\x82\xcb\xf70\xb0\xbd\xbd'
 b"\xc2\xedr\x1a\xe0=\x8d\x95vB'\xfc@\xd8;A\x88\x95\x9eb\xbd\xf0\x82\x8f"
 b'`\x8e\xafe\xfcb\xff\xf0\xd1K[\x81\n\xbe\xd1\x1c\x92\x95{o\x84j\xe8\xb7'
 b'\xb7\xb9\xcd\x11sQK\xd69\xf7\xde\xf1\x15w\xc4h\xd8\x0f\xfc}\xd7\x19\xbd\t'
 b'\xe7\xa9\x1c\xf1\x06ms\x94\x82\xdeE\xfdtb\xb5\xd6\x04\xe5\xbf^\xe2\x042\x8e'
 b'LL<\xc8\x9e\\\x1a\x06\x1f\xecw\xf7\tZ}5\x8e\xe2=sa\xa3HdQ\xc9\x81\xc5'
 b'\x9e\x04\xa4\x1e\x15\xd5\x8f\xcc>i\xc3\x1b}\xb6\xc6\x9b\x14\xb7\x96\xc8'
 b'\xc1(\x01r\xa1\xa5\xbdz\x1a\xb0s\xd7O\xf3\xca\xfe\x10\xd6\xb5\x13\x94(L8'
 b'\xa4\xd8\xd4\x10\xf9\xba\xd7\x80b\xf2\x8e\x89\xb0N\x85U\x11\xcfw\x87'
 b'J\x86L\xd3-V\xb8\xf0^W\x80y\x8f`\x9d\x15\xb9\xa4\xc3n2gd\xd1<\xe2Om'
 b'c\xa3c\xd9iVn\x1b<@\xb0B|\x94\x97|\xb4,\nM\xd6v\x06\xeb\x91\xb7\xb0\xe4'
 b'\xb5\x8eo\x8c\x8cB\x07W\xb1\x1ca\x84\xbc\xd34:\x86\xf70\xa1V\x8e\x7f\x97'
 b'\x1e\xc1Ew\xbe\x89\x19e\xad\xe7W\x90\xb7QUa\x98\xda\x14\xce\n\xc9-9'
 b'\xd9\xe0\xeem\x0fo\x94\x805VX~,Sa*\xd1#\xb1\xfb\xc0\x0e\xaa\xc4\xffE\xed\xfe'
 b'\xd4\xf8\xaf$\x14\x9a\x16\xcf\xc2\x99\x9a\x1f\x8ch\xe92k)\xe2\x0b\x9e\xf5RU'
 b'I\xb4\\\xf5\x0fWj\x1d\x86\x14"\xb5D2n\xc7\x80`\xb3\xcb\xfd\x02\xb0\xd5'
 b'\x08\x98\xcf\xac\xafGr\x9a\x1d\xeb2M\x90\xe0\xce\x15\xa2S\xb8e}&\xf8\x97'
 b'}\xe0#\xa3]^\x06\xa0\xff\xa4O\x1a\x17\xa2\xec\x0f\xe1\xd37$\x04q\x0b\xf4'
 b'\xf8\xb3\xfc\x93\x1d|\xc5N\xe0\xbeR\x9c\x0c+\xac\xd2\x92<\xbf\xf4\xb8]X8'
 b'\r\xe24F\xb81\xe5\x97n\x9d\xfc\x84\x9b\x17\xfa>e\xea\x85Y\x8c\xec\x0fN'
 b'h:P\xea]-%3\xca\x1a5p\x85s3$\x009\xa3\xaf\xe2p\xfc\xbf"\x83d\xeb'
 b'\x82\xbd\x95\xf7\x18\xfa\x1eb\t\xb5\\-\x00\x05\xe8\xa5\xbb\x0e8k]1\xdev'
 b"P\xdd\xae\x03\x1c\xb8cs\xbcR\xcd\xc0\xf4[]:\\\x01S\xde\xaf' +\x99\xf8\xceE"
 b'+\xe7\xc8j\x95\xcfn6\xef\xd6\xbee\x98Y^m*\xb1\xfc\x83"\xf6\x91\\=ix\x8d'
 b'\xb3\xb9\xec\xa3\x86u\xd1\xeaX:O\x81+S\x80\xc3\xaei\x01\x1dj\xa7\x10\xee'
 b'E\x00\xaf\x96O\xc1s^\xfa#\x8e`\xf4\x1d\xd1r\xe8\x04n_\xad:\xe3\xda\xd6!Z\\'
 b'\xc9\x14Y\xda{\x1c\x81\x96\xd1\xb4S\xbf\xe1L\x8a\x90h\xb7\x0e\x91p\xe3V\xe2'
 b'S\xe5\xec\x00\x9a\x0b\xcf\x9bg\x89\xb4\xd5h=5\xf2\xd3<-\x18\x81Fa*'
 b'|\x18\xdf\xd2A\x13\xe2\x08\xe8\xe7\xba/\n\xd3\x13k\xf8\xdb\xdc\xb48\x8c\x88+'
 b'\xeap\xd6\xd3\xb6 +C\xfc\x08\xfdI\x87|\xc7\xc65\xcc\x0c\xec<\xd6\xc7\xf3'
 b"\xe6\xa6\x90?XL\xc89U\x01\xe2\x94\xc0'\xd93\x8b\xa2@/\xc9!\x9bm$\x87*\xb2"
 b'\xa9\\\xfd\x13\xf1\x15\xa1\r\x16>\xc1\xf9[\xc8\xa7\xde\xdb\x9fGZ'
 b'\xcd\x1ca\x8cFk\x08!\xa1~\xde\xd2\xba\x07\xc4\xa3[\x8f\x06\xf6\x17\xda\xc7J'
 b'\x88;[~\xb8gGz\xa9\x1e\x84\x15\x16\x0b(\xd3V\r\xb9Z*\xdd(\xce\xd83F\x90'
 b'\x15\x10\x96N6\xec\x87>\x9e\xe6\xde>o\xbcF\xc8\xb5\xb3\\p_\xd1G\x84O*sC'
 b"\x97\x06'\xf4\x18B'x\xc1`\xba+z8?\xfchn\x04\xb2w\xf1\xf1\t\xbb\x830\xa8"
 b'X\xfe\x13\x14\x1e+\xe5\xb5\xe1\x15\xa3};8\xf0\x0ea\x16\x9f\xf4\x02rpy'
 b'*\xb3\x8e\x97L\xd6O>\xc4`\xfee\x94\xe3\xcd\xa7\xec\x9fF\xd5\x1f_)\x0c'
 b'\x18\x0b8xf\xe1\xbb\x96[\xa8\xd8\x1b\x85\xa8\xbc\xb2I\xf9<\xb2'
 b'\xa3\xad\x1f\x12\xd7\xc9\x00\x83\xf9\xbe\xcc\xfc7?\xbc\x8aN\xf6\xbd\xf5'
 b'\x13\xb68 \xa0L\x87\xd6\x9a.\x87\x1c\xae\xbc_Hz\xbf\xf4\x01-D\xcez'
 b'\xc9\xd8$\x19;\xb8\x8cf\x9b\xeb\xfa\x07\xce\x16\x06\xdd\xb1\xc3\xf3\x91'
 b'\xc2\xe4&\xe9\x02\xa5(~\x14\xdf\xf7\xadS\xc2\x1e\x16\xb6*\x15\xb2\x95U\x84h'
 b',*\xac\xf7\x84\x90\x86S\xf71\x16\x8d\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n'
 b'\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f'
 b'\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3'
 b'\xd8or\x8e\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW'
 b'\x95Hv\x9d')

test_signature_Vote = (
 b'\x00\x00\x00\x0b\x01\xc6\x83\xd8Y\xb4\xf2\x1cC\xe0VK\xe6\xb9X\x03V\xfd\x98?'
 b'Z\xb2\xe2^\xc5\x15s\xc2\xfb+\xd5\x93\x98g\x8d\x02\xa5\xc1\xf2P\xf7W\x9e\x84'
 b'\x9f\x80\xc7g\xf7\x98\x04Q\xab.\xdf\xe6\x1e\xd5\x9f`Gw\xdf\xe0\x036C\xfa'
 b'\xf1\xa38}\x07\xa8\x13\xf5\xb2\x81JD\xdd\x0e:\xf5y\x8c\x1cC\t\x1b\x06\xc1'
 b'\xd4\x1fkb\xca\x9c-\xdb\xe1\xe0a\xc95\xcd\n8\xb3\xbc\xdc\xd0t$#\xee'
 b'\xc3Y\x85Po\x9d\xc8\xda\xe5\xbe\xf7(\x97\xb4\xc5\x18v\x8d@\xe1\x10\xb2>\xbd'
 b"\x98Q\xad\xc9\xc0`\xc4v\xba\xc9;\x93\xa3B\xce\xadIy\xfb\xc5\xec\x99'\xa8"
 b'\x8c\x9d\x08g\x9e\xc1}\x9f\xbc\xf6\x13\xb5\xed\xa2 \xf0\xa3QDxn\xe5\xe3\x89'
 b'\xd9d!9\xd3\xa5\xa2\x9c\xec\xf9<\x183\xcf\x96A6\xf0\xb8p \xdf\x124\x10Hg\xbc'
 b'oB<H\x92\x05f&\xa09\xeaJ\xb9n\xf9\xc3\x95*1\xe1\x05=\x95\x05\xb1\xa7\x88\x1a'
 b"'j\x8a\x1cQkL\x0c\t\xa0\xa6\xc8\xa2\x8c\x10Y+O\x1d8\x84\\v8\xccyP\x8e"
 b"\x86\x01,\xda\xba\xc6k\x0f8\x0c\xabVU'\xe8$\xadS\xe9\x0ca\x06b$\xe7W\x0e3"
 b"iw\xdd\xb1\xab*{\x91\xc9\xd1=\x1a\x89\xc4\xa8qt?\x03\xdb\xef#\xb0\xb0\xcb*J'"
 b'\xea\xbf4\x0eQ\xe62C\xe49:\x0b\x9fJ\x14\x91+\xc6\x964\x8c\x18"@\xab\xd5\x12~'
 b'\x91\xfea:\x8c\x1f\x050\xa23\x83\xd0\xaa=`\xf9\x00\xccI\x99\x02\xdc\xd3\xff'
 b'w\xa1\x11\xdf\xc0\xe7\xef-\x15\\\xa3\xea\xe9\x9b\x1b\xa8XSc\xb8\xf2{\xbdy'
 b';\xd06\xcb\x00W\xbfG\x16\xcd\x90\xa6\xc3a|l\x7f\x8e \x1a\xf4j\x89\x15'
 b")\xd7\x0e\xa9\x87\x16u#Gj\xbd\x17\\\xdc\xff1\xc5\xc7?'c\xc8&x\x0f\x03C\xde"
 b'G\xac\xc1\xc6\xe7Ax\xa6a#U\x04\xbf\xd1\xe6\xaft\x83Sp\xa8\xfaA\x8cfd\xc4a'
 b'-\xb6\xe1\xb9#\xc1\x850\x8b\x8cN\xe8;G\x9ej6xb\xdfz\xa5\xd9\x8c\xaf\x1c\xac5'
 b'H@\xd6\xec\xc0I\x92\xf1p. \x0e-f\xde\x88\nS\x1a\x8aPJ\xf5n`|\xd3\x1f'
 b'\xf16\xb3z\x0f\xb3Y\x9b\xa3K\xea\x97Wj\xea\x83\xa2I\x17T\x9c\xe0\n"'
 b'\xb9\x08\xb7\xc3\x8f\x05\n\xddv\xa5b\xe6\xd8\xcc\xcf\xf7:U\xa5\xdd'
 b'\x88\x8eT\x05zZ\x92\x1du\xe9w2iT\xe9\x8a\x91\x9euT\x1f\xfd\x86.\x0c\x17B\x18'
 b'fDF6\xf6\xa6{\xb9\xc6\xa9\xd0\x101 \\\xb9\x16&k$\\\xcf{\xb6\xcb\xae\x1c\x9a'
 b'\x05\xee\xaeb\nM^A\x03\xc8y\xf4\x0eI\xf5\xb4\xb8\xfa\x1f\x12\xb6\x18M\xdc'
 b'\xbd\xa5\x9a\xf90\n\xc0I\xcc\x1a\xa4\x91\xbc\xab+0\x8d\xef]\xb1:z\xba\x1a'
 b'\xb5\xc6\xea8\xcd.\xa7\xed\x97\x14\x81^l\x8d\x91\x1b\xcaH{j1\xa6 \xeb'
 b'\x1b~|\xe8\x82y\x8e]\xfc\xa9\xf2\x8a\x95|2bz\x85z\xa0\xdfk\xac\x8d'
 b"\x13\xc7j\xdc%Z|d\x1a5\xfe~\xcej\xfe'C\x82\xf2\xaf\xc7\xcc\x17\xdb@.)?"
 b'\x9d\xdf\xfa\xdd\xd8\xc9\xcf3\xef)\x83\xc2dZ\xc8EQ\xa7\xc1\xf7{\x8e;n'
 b'\xf2`\xf1\x84\xa5L\xf4!\xe8\x94\x9a\xe8\x8f\xc1\xab/\xe5\xdew/\x87\xb8K\xdb'
 b'\xc8\x8f\xfe\xe9v&j\xb26\xff\xe8\x12\x04\xd61\x94\xc2\xe8\x98\xae'
 b'\xac\xd3\xef)7\x8a\x8d\xcfRxF/fl\x1e1\rl\x9c\xc8\x16V\x0e!\xed^\x92\x1e'
 b'jK\xd1;\x1asY_\xb2\x81V\x88\x1b\x05\xa8\xf6\x14\x9e\x13ek\x1b\x1f\xc1\xae?xn'
 b'\xc1\xae\xa1FL\x96\x92\x02\xd7P\x9c0\xf2eb\xe3\x8dq\xf3\xe1\\\x9f\xd6h'
 b'\xe9\xa1\xb3\x81\xa02\xf1\xe2T\xbc\xf9\xbe\x04\n\xc1Q\x07,O\x0f\x81HJ,'
 b"8\x89.\x97.a$\xe78\xa0'u<\xa9\xda0\xfaK\x07\x87c\xaa\xd0\x07\x90\xe8\xb0\xb7"
 b'\xc1\xd6\xa4\xcf"9\x80\x89\x95\x15\x00\xaeR\xbd\xd9b\x92\xe8\x15\x89'
 b':\x1e\xf8;\xddz\x94\x03\x0e\x00\x9b\x90\xa3`\xe9\xac$\x19\x9dk\xbeY\xa2C'
 b'\xa0 \xf8\xeeU\xea\xb3\xbbX\x12k\xf3\xc8\xeb\x955\x00Vn\x82\xca\x1fF\xb6'
 b'U1\xd3\xf5m\xa1?n\x9cX\xaaP\x80\xcc\x9b}u\x19\x18}Z\x0e\xb1W.\xec\xfa`'
 b'\xd0j\xf1\xf6AljF\xb5\xe6\xe8\x88\xcb\x00\xa1<\x83.\x86\x80+gK\xce\xc1\xe2j8'
 b"\x89\xfe9\x01>U\r\x1a\xa7/p)&\xb1\x87\x1c'~0\xc1\xf2\x83\xf9\xa2\xe0\xaf+M"
 b'3\x90\x97F\xd4\x07\x8f2\xadZc\xa9\x0f\xbd\xfbc\xb1{\xaf\xb4JN\xf3\x0bLuT>'
 b'&Ic\xa3Lcq\x89>$\x7f\x8c\x80\x11\xce\x1aUs\x96\xe8\nu\xf3\x8d\xbb?|4'
 b'\x17{\xee\xedF<\xb3\x10\x15\x18\xc2+\x89=\xcb0+uU\xa4\x95\xdb \xef\xa71\xb4b'
 b'\x8c\x9e\x1c\xd3\xcc\xe9\x98\x16\x96\xc1]u\x1f\xa6\xc8\xec\xaa&\xb9-M9:\xb0'
 b' \x0e\xaav\xe6\x92\xfa\xdd\xdc\xc0}\x91\x15\xb58\t\x8a\x1d\x17\xf0'
 b'\x93\x1a\xec\x88\xd1\x99\x00`\xecI\xd9\x88\xbb\xbf\xb9\x9cdd\x08\x8f'
 b'!\xfd\x8e\x15*\xf7\x12\x8cp\xf8\x97\xe7/t\x1c\xa0\xcc\x11=pMs\n\xbe'
 b'\xd2\xb8]!\x8e\xab&\x1d\xc8\xfd\xfb\x98\xc5$$\x9c\x13\xe0\x81H\xeaUx\xae'
 b'tkj\xc5<\x1d\x04\xf2\x05.\xaf#\x91-[\x11\xaeUKyL\xca\xb2a\xa7\x99:\x87'
 b"\xed\xe1\x11\x9bS\x89\x7f\x01}\x82\x87N\xb32'\xf7\x9fx\xd4\xc4"
 b'\xbb\xf5\xc9\xa1\x91&Bu,\xaa\xcdG\x8c\xe8cd\x83\x15)F\xa0\xdf #K\x90\x1f\x91'
 b'\xd3p\xeaD\xc4!\x19\x0b\xac(\xaee]*j\x1e9\xbc\x19\x19\xb5\x8eo\x8c\x8cB\x07W'
 b'\xb1\x1ca\x84\xbc\xd34:\x86\xf70\xa1V\x8e\x7f\x97\x1e\xc1Ew\xbe\x89\x19e'
 b'\xc2\x82\x0b&\xe4\x036"\x8e\x94\xe4\x02C2\x7f%\x9e"6a\xa9\x98\xdf\xc7'
 b'\x00`\xfbA\xd7\xa0\xec,e\x83\x9d\xea\xaf4\xc7\x02SZ\x11\x06\x8f\x11\xfcA3)ra'
 b'\xf8\xb4\x12\t9\xd0c\x08_\xe5WK\x01j\xf3\xd6o\x93\xe5\xe4\x7f\xcb\xf6i'
 b'\x996 \x82%\xf3\x93\x14\xb8\xbb\xf2\xe3\xc2F^\xb0\x1e\xdb\x1d\x98'
 b'\xaa\x05\xe8\xb1d\xc7\xcf&P\xfb\x84\x99\x05\xd4\xac\xea4\x92\xbd\xdeDi\xca;'
 b'h\x96\xd3\x18I\x83\xd0dg\x057\xe7\x02end\xc1\xa4\xbf,\xf8V\x14N\xc4#\xa1('
 b'\xb1\x11\xb4\xc5\xbak\x8c\xd6x\x13\x8agCbj\x8b\xa3i\xdd\xf9,>\x9a*'
 b'$\xe8\x86\x95-\xf3\xcf]\xb4\x81\x03\x9eNl#\x90L\x86\x0b\x06\x95\x9b \x01'
 b'\xc0eu\xd5N\xd1\xfb\xff\xdd\xe0\xd3\xfd\x16\xf8\xe6"JM\xd0\x1b\xd8\xbe1X'
 b'z\xfd\xd4\x85;\x12>\xb1x{\x1b\xe4\xff=\x8a\xa0\x03C\xa4\xe3\xea\xf4\xfc\x7f'
 b'\x0e\x90(\xa8\xe2\x0b\x7f4\xa7{0\xa3\xa6z_:i\xad;\x87\x0elS4\xd3x\\\x8a+OJ['
 b'\x08\xc3Hb\x90\xc4\x10\x9d<I^\xaa\xe9\xe2~9/\x00\x92\x87\xadj\xe7\xb4'
 b'\xb2\xcd\xbbG\xf2\x9b)\x1e\x0fa\xd1G\x08\xf7\xafwQ\x0b\x17\x1c'
 b'\xfb\x08\x89\x85\r\x9e\xcd\x8c\x9d-\xb8\x1f\xf9\xc6\xd0EZ\xacb\x9b'
 b'\x8c\xa26\xe1.\x0f\xf2\xb7\xa7\x83\xe7\x86\x89%\xed\xb4\xee\x0f\x8b\xdf'
 b'=\x98\x8b\xd0\xd5\xea\xa1K\xe3\x1a\xb3\x04\xdc\xe8\xbdY\x1c\x83\x0e\t'
 b'?\x0b\xcb\x1e}L\x1b\x8dc%\xca`u\xd7\x0fZ\x9e7\xf99\x8c\tT\xf1\x9dag\x9e'
 b'\xc0\xd8\x83mO_\x85\xe5\n\x0fQ\x83\x86\xd8>\xb6\xccw\xd3Y\xe0\xee\x05)'
 b'(\x7f\xa0El*\xd8\xdf\x0f\x06\x14\xd2\xf0\x9b\xf6\xb1\x82mL\xf3\x11m\xe8U'
 b'\xd7<n!\x0bV\xf4\xa5}\xf9O\x03#\xd9\x95\xd7\xba\xf5Hs`\xcd>\x14\x16>\xc1\xf9'
 b'[\xc8\xa7\xde\xdb\x9fGZ\xcd\x1ca\x8cFk\x08!\xa1~\xde\xd2\xba\x07\xc4\xa3'
 b'[\x8f\x06\xf6\x89\xf0\xf9:VZ\xabF\xcdn\x04S\xe5\x84@\xe0\xd8\xa5\xf7\xb9'
 b'\xe3\xe7\x9a\xfa\xf56\x1b\x9e\xb6\x83X\x93\x11r\tUu\xf2\xfdi\xb9\x05\xd1\xb8'
 b'\xfd\xfc\xef`\xcd|\x07\x904/\x0b\x11\xa9\xc3\x82\x8c7\xb3\xee\xc3'
 b'\xca&\x82\x00O\xc8M\xeaD\\\xf1P5vYD\xdd\xb9\x96o\xad\xa8\xff\xa3'
 b'\xa5j\xdb\x06\x92$\x0cQBl\ng\x1f+5A\x0b\xca\xad7\x969{\xf7\xfexLGi\x87y"'
 b'\xa0\x91H\xcc\xb1\xbe\xd1\x01\x9crI\xb8\x8bt\xa4@\x91\xfc\xd5"<&cWs\xa7{\xf8'
 b';\xa5\xa0\x8f\xda\xb4\xafi\xe2\x1dpP%\xff\x16o\xa4Rd*\x1eK\xab\xbf'
 b'\x8b\x18\x84"\xceu8\x9bc5\t\x12\x04\xf0\xf0=x\xa5\x01\x0e\xbc4\x1e\x1a'
 b'|\x9e\xf2\x82d3\x8e\xa8\xec(\xddX\t\x83\xa4U\xb9NA\xa4VO\xae\x7f\x1bh$\x8c'
 b'\x02\xa5(~\x14\xdf\xf7\xadS\xc2\x1e\x16\xb6*\x15\xb2\x95U\x84h,*\xac\xf7'
 b'\x84\x90\x86S\xf71\x16\x8d\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+-'
 b' $\x16\x1b>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c'
 b'!\xeb\x81L\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e'
 b'\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')

test_signature_Token = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2\xf1x\x7fw\x9d\xb8\x93\xce\xa4\x9fq\xb3'
 b'\x15\xb7\x0c\x95\x13\xa4\x8c\xe9m\x88\x8c\x1a)\x11X\xbb\x05\x13\x84|'
 b'\xc2\x82\x83_\xc6\t`\xa6\x07\xdb\xfd\x00W\xcb\x83\xec\xec_]\x92'
 b'\x17\x90\x85\x07\xbf3(\x7f#\x14w\xb96hi\x10>\xe0\xb5\x82\x1d\xea\xe3\x96'
 b'g\\\x19\x0b\xa0\x06\xb7\x1b+\x0e\xb5\x8e\xaa\x10\x9bp6\x016iE\xf5\x94~'
 b'\xc4\xf1W\xb1\xbaf3\xd1f\x1f4\xfa\xc8V\xe62\xfcZv(6\xcd\xa7d\tF\xc3\x85'
 b"V\xdd\xb09\xd0\x1f\xc3B\x102'\x87\x9a\xdci\xa1\xd0W\xbe\xdc]\xbc'$"
 b'd\xb2\xf4\xd8\xfb\xd6X\xac:2\x91\xd1~\xad\x98\x02\x8e\xcc\xed\x99?cRs'
 b'\xf2\x19\xbdO\xebF"4\x1fE\xd1\xe0g\xd2\x06\xb9j\x83\xeb\xca\xf1A\x88F'
 b'\xab?\xad\xb7\x1c9\xa2M\x18\xbb\xf7\xb6J\xfaq\xf0\xa8\xf1\t\xfb'
 b'\xed\xf7\x02\xfe\x1b\xde2:Rr\xcb\x95\xf9\xc0\xb8}\xb5&\t\x92-\x92\x90\x0e'
 b'!]\x99\xd2\xd5\x16$=\xa0\xe58\xf1g\xbb\xf1\xe5t\x17\xcab~\x92\xfa\xea'
 b'\xff\x8dT-W\xa4K\xbb?\xcf$\x1f\xd9v,<.z\r\xa8d\xd7\x0f\x8a\xef\xaa\x94\x88'
 b'\x04N\xac w\xcdC\xd2\xb2\xf2\\~pN\xc6\x1e\x03Jl\xbb\xbb]\xd7\x0bK&<\x16'
 b':8\xf1(\xc1\xce>"\x9c\xf4\x04\x86`i%\xbb?\xc6\xa2u\x0b\xb4Q\xdf:\x9a\xf0\xf0'
 b'\xae<\xdf\n\xbf#\xe8\xaaD\x8e\x15\xe5\xae\x89%I#\xa6\xcd\x9d\xb7o\x15otCd@'
 b'\xfc\xe2$\r\xb5\xa7\x01\x95\xd4]\xb5W\xf2\xfcJ6\xccz\xeb\xac\xc5m\xfeo'
 b'\xdc\xc3%5\xa5\xb0\xd7|\x8d\xfd\xe4\x875WP5U\x97\xea\xa7Z\xdb[:\xf8\x86\x0cs'
 b'\xad\x13\xa9j\xab\x97\x10\xe3#O"\xa6f\xf6\xd2}\x0f\x19@\xa0\xd2L\xf5\x1d'
 b"'\xc1I\x0c\x03g\x1e\x18\x16[>K\x11\x96a\xe9\x98\x02H\x07\x91Zno?\xc8\x12\x88"
 b'\xab\xcb\x7f\x81\x81E\x16\xf7`\x93{\x11F\x10\xc4\x9fK5\x95s\x81\x94)\xf4'
 b'\xfd0\xc9@?\xc8\x00\x0c\xbc5\x96\xc2}\t\xa8\x00\n\xf55S\ny\n\xc6'
 b'\xbb\xadu\xcf\xad{|e\xaf\xc1$^\xca\xd7\xfc\xa0\t#\xf3n\xd1F\x03\xcd'
 b'\x00lY\x8bX\xb8\xce\x86\x01\xb8\x92\x9a\xb3\xfc\xc9S\x0f\xbb\x15\xf4'
 b'\x9c\x03\xad`\xd5\xf5`\xaa\x1cO\xba`\x95\x8aF\xde5|\xe6\x03\xb1N\xdeF'
 b'\x87\xd1k\x14\xb4p^\xaf\x07\xad\xe41\x0c\xaf1\x19$-K\xee\xba\x1b3\xad'
 b'\xbc\xe6\x1e\x04\x80\xf8\xac\xe6\xd4F\xa3r\x7f\xa5\xb6V\x91\xc8\xd3\x89'
 b'\x9d?\xde\xc5V\xa3\xb9)\x90x\xa7<\x8f\xa1\x8b\xbe%\x96T\xaen\x80i\xceW\xd5w%'
 b'i\xd3\x07I\x1c^\x13W\t\xd0\xcb$[\xb2\xa5_\x08g\xad\xd5\x15\xffL\xfd5!Y\x15'
 b'\xa1\xab\xa3cv\xc9\x89\xa2\x9a,\xa8\x99wFBH\x88\xe7d&\x04\xf5nh\x13&\x10\x0f'
 b'\xda}\x1c\x90\x91LRfC_~\xf8\x03q\xf1\x1f\xca\xec\x12G\xd9\xd3\xc9\x1d'
 b'\xbf\xb8\xa3\x8d\xd8m\x05b\xc9\x16\x0eg\x04K2\x95\xfe+\xdcn\xe2\\\x89c'
 b'\xe7N \xfb\x07\x1d\xc8EZl3Z\x91JCg\x15\x9e\xbe\xd7\xdf\xc2\xbf\x99\xa3LS\xd6'
 b'\x93\xf7sY\xac\x99\x80\xe5\x7f2s\x04\xe3\xaf\x01\x90\xefM\xe3\x05'
 b'\xde\x91\xfa\xaf\xf2\x1e\xd5\xe6\xfa\x06\xa3\xd5\xb9\x80oq hf\x08'
 b'\xd7\xe1\x878y\x13\xf6\xa9\xb3z\xdf\xb6L\xff\xff\x9e\xa1\x88PF'
 b'\xda\x14\xe9\x80\xa6\xe7\xac\xf4\x97\x82\xc5\xb3\xb4\xb4I?5x\n>7\xba_6'
 b'2\x039%vcLKh\xe4L\x87\xd0\xdd\x8f\xd4\xb8\xd7\xe5p\x0f\x9f,d\x1bs\x10\xfc'
 b'\x9f\x8b\xac}\x1aJS\xe23\xbc\x9f\x88M\x96\xc5\x16\x9c\xfa\xcc\xaew-\xf2\x96'
 b' 5\xf5j\x93\x12QZz\x83\xd7\x14\xd6v\xd7.\x10\xa7\x9b\xf6\xb7\x1f\xa5\x05'
 b'\x82\xd1\x17\x9c\xf4\x95i=+F\xd4M\xaa$\xd1\x08VB\x1a\xd8^\xe4;\x82'
 b'\xcd\x1b\xe5L\xbf@k\xd9>\xf1\xb4\xb0\x95?0H\x1d\xa0\xb2\xd3Y\xfb\xea)'
 b'\xfc\x8f)\xe8\x17`j\xe5_\x14\xea\xef\x8f6:f\xefn%\xee.&]g\x833U\xae'
 b'\xa8\xe19\xbb\x816.\x12\x07a\xa3\x08PN\x01d\xd8\xcf\xc79#\xd0\xfe9\xe3Lc\x8e'
 b'\xf0\xa5$h\x17d\xc1A\x7f\xfaw\x80]\xce\x05J\xb7\xb3>Xs\n\xd2\xf9\x8b\xbfr\t'
 b'\x01+\xa4\xc5<\xde}\x9d\xb8h\xef\x06\x08\xb3\xb5\x96\xf2\x8e\xd9\xcc'
 b'\xc1N\xfbH#\xdd*\x1f\xc8\xe1\x1f\xfeu\x94\x96-\x04\x90l8\xbb\xa44s\x98v\rh'
 b'\xa3\xa3\x01H[E}K6\xc9D\xce"xQ\xf7t\xac\x1f\x01)3\xd1\x8d\xad?\x96\xf8'
 b'\x15N\x95\xa3@\xdb1\xa7\xa8\x8cv\xabE\x9d\xde\xc19\xb1\xbc\xc4'
 b'\xbd\x03\xa7\xcc\xe9\x11\x11\x90u\x9a\xdc-S8\xe9\x14f\x18\x9f\xbe,y\xe0\xe3'
 b't|\xc9\x9b\xb7:\xed\xd86p\x89l\x91\x08\x8c\xa2\x06\x11\x83\x90|\x195\xf4'
 b'\xa1\xfc\xe5\r\xfd\xe2\x1f\xf3|\xf2\xfc\xa5\xa3\xb7\x1d\xc5\xf4\x962\x13'
 b"\x04\x1c\xa3\xf3F\xeb\x99b'\xdc\x85\n\t$c\xc4\xc2\xe5\x057U\x0f^\xbbV\xacU^"
 b'*\x86\xdd\x96\xb7\xb2\xba\xd7U\x9cX9\x89j\xf1\x0e\xe1b\xba\x9b'
 b'\xa8\xd2\xfe\xd3cV\xd1\xf6\xad\xc1M\x00\x89\xdf\xbe\x1e[!.\xe9\xf01[\xae'
 b'\xefB(7\x1694Hj\xd3XW\xddZ&U\xbdK+\x05#\xe0R&\xb5\x15\xe2\xdfB\xf1\r\x9f'
 b"\xfe\xc66/\xfe\xd7!'\x98]4\x08\x07g&\xd2\x1f\x00_\x1f\xd3M\x18\xed"
 b'\x9d\xf8\x85\xe9\xc9\xaa\\\xea\xb6k\xeb\xff\xb1\xd8l\xcf\x8f.\x97\xa3'
 b'\xae\xac\x1c\x93\xe8\xed3\xfd\x19<#\xba0\x1d1%\xf7x\xfbn\xd14\xc8\xd6'
 b'n\xea\xb4\x1f\x80\xc8\xb8\xc1\xf6\xfb\xdd\xf4\xdaRcsD\xcb?\xfb\x87&qW'
 b'\xcf\x03\xde\x8c\x8d\xe8\x0e7"&?"z\x899$\x1c\xa2\xb8UC\xa7\xde\xcb|\xb9u\xd5'
 b'\x866\t\xbb;\xe2z\xce\xa48\xa6\xe7`Zdn[\xa7{\xf3\xfbTx\xec\x90\x06\xfe\\'
 b's\xa7\x0e\xff\x03r\xd19\xf8,\xf8\xef\x8a\xa3\xe5v\xea\x92\xf8\xecIR\x9f\xaf'
 b"tZ\xd8\xfa\xea\xb0u\xe2\xdc&`\x03nT\xa4y=\xdd&;\xedyUBb\xab\xa1+'XH\x12"
 b'pY\xd6_^\xac6o\xa0_\x87\x19\x86v\x84wk\xd2&\xa81\xbd\x9a\xa9\x0c\xc3\x02>'
 b'\xca\xf5$Un\x07<d\xe4\xac7!\xe8\x8f\xd8\x03H L\xa1\xe9\x17\x0f<zKL\xe9'
 b'\x85\xfd\xdd\x9e.\x8d\x92\xc7\xfb\x14\x1dE\xa7]N\x9d\x93\xa6^\xae'
 b'\xd3\xae\x9a\xa2\xc2\xce\xd0\xda\xc1nhs}s\xd1\xb5G\xac-e\xe0DQ\xdc'
 b'\x03\x0f+\x83\xf2\xb6+\x1c\xd0Dr\x031\x85\xd9\xbb\x1b\xb8\x06mp\x94\x0c6'
 b'1\x93\x80\xf0)&\xd5\x03OCc\xba\xe4\xeb\xc2\x13WQ\xca\xd5c\x86*\xf4\x17f]\xac'
 b':;[\x97|\xdd\x07\xc7(\xc6la\x065\xdb|\x85j:\x8c*?\xb5\xb0\xfb\t2w'
 b'\x0f\xd7\x14^\xc3\x0f\x82\x84\x0f\xe3\xae\x10\xec0\xfc:s4\x14\xff'
 b"\x86\xceW\x86n&\xa2\xe7M\x1f}}\x19\xeb\x16\xed?'\x9d\xd7\xf8&\n\xca"
 b'\x00\xa9\xbfg\xb8\x92\x037r\x0f\xb8\x0f\x16\x1d\xc8\x0f\xf8\xfa\xba\xae'
 b'\xe4g\xfc\x1a{\xa5\x0c\xcdkw\x9d\x03%\xbb\xf7\xad\x05\xae\xef\x1c'
 b'\xc2\xba\x8d/W\x18fMc\xd2\xdc\xf7\x13|F\x8a\xc3\xe74H\xbe\xabQ\xa0&\xad\xddN'
 b'i\xbe\x8c\xe8L\xeem\xc0\xbe\x187O\x89X\xad\xebo(\xbfqg\xe4eB\xe1fg?'
 b'b\x8d\x9a7\xb5\x07\xa9ixecn\xb3\x1a\xa8J\xc60z\xaa\xae\x18\xc7\x9c'
 b'\xbe\xacq\xfb\x0b<\x95\t\xcc\x0b.\x19&\xdf.\xea\xcf\xcc\x19\xb6\n\xd4\x8d>'
 b'fM\x85\xebbG\xc5\xbaJ\xd3\xc3\x91\xef\xc3\xbccz\x8d\xc3\xb7\x1f\xee\xd3S'
 b'u`\xfb\x10?(\xd2w\x0b<1\x05\xad\xcb\xc2\x96G\xa4\x8e\x8dl\xb5\x93P'
 b'\xccu\xa1\xae\xe8\xfa2:\x87{\x7f\x90\xce\xe8lk\xb9\x06\xa0\xca\x9a\xd33\x19'
 b'/\x86X\xf9\x81\x99\xe4\xccg\x80\x87\xe3`]wrHH\x1b\xb5LN\xc4S\xa6\x8dt\xa0'
 b'\x96\x98\xc4\xee\x9b\x8f\x87\xa55\x8d\xa9\xbd\xb1ac\x05\x88\xc0%\xd5'
 b'\xa9;\x10I\xb7\xcf\xae\x97\x85\x95\xf8\x1e\xd1\x91\xfbzU\x05\x95t'
 b'\xbf\xfc8\xad\xf2\xcc\x16\x88\xcc\xdd\x0e1#eTcFU\xd5M\x143\xc0\xa6}\xdf\xce}'
 b'\xf2\xd2\xad\xe8\xa3\xc4\xcf>\xc3\xb6h\xe9j\xcc\xcd\x04wJ\xa0\xf1\xc0\xcea#'
 b'\xddB\xc5>h\xd2v0\xaa*\x08i\x00`G\xf0d\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t'
 b'\xf6fP\xdd\xd7j\x86\x03\x18)/\x87\tWVs\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n'
 b'\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h \xf0u/\xf56a\xa6X\xffG\xb6\x9f'
 b'\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3'
 b'\xd8or\x8e\xd6\xe9\x92\x95\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW'
 b'\x95Hv\x9d')

test_signature_TransferToken = (
 b'\x00\x00\x00\nqv\xfaUe\xc5\x9a\x87uz\xc3\xa3\xc4^D\x84z\xd2\x98\xce'
 b'"(\x08\x9a\x1c\x9e\x0b"\xc5@\x9e\xc2e\xc9\xe4\xbd\xd6\xb1A\xfe\x9c\xb4\xe6"'
 b'<\xc1h\x91\xb1\xa0\xc9!8qv\x81\x91\x95\xea\x04V+T\x98X\xfe\xca\x7f'
 b'\x946\xab\xb97\x15\xa5\xab\xb8\xf0\xa4\xd6\xb9\x81\xdd\x9fL\x03=\x99'
 b'\xfc\x17\x9b\x8b\xdd\xb1\xedB.\xa5F\x19\x91<Pk\x1d)(\xa0\x84\xde\xc0\xff'
 b'\x07\xb3X\xa95)_yt\x9b\xb9\x80M\xca\xbf\x8f\xa3\xffSi\x00\xb2.\x97\xba2Dy'
 b'\xf5\x1b\x1a|\xd9\x87\xdb\x85\xfd\xd7nK%\xd1n\x19\x11\xd4E?\x12\xf2\x7f\xae'
 b'\x98\xd4\xcdR\xe7\xcf\x88\x94P\xe7&K\x07\xc2\xb1\x00\xe7.\xf7\xa9'
 b'+\xef\xdb\x1e\xd5\x0c\x07@N\xdf\xb5zP\xd3\x1b\xb6\x01O\x83\xbc\nK\xb7\x80'
 b'\xb6\x10\x12\x03$:~\xa1\xe9\xb4?\xc6\xdb\xc8\xb5s\xf9/@d\xca\x9f\x10\x1e'
 b'p\xaaA\xe8\xdc\xa0\x9b/\xed\xe0/o\xa5_\xb5\xfe\xc9\x1e\x0c\x98'
 b'\x94\x98\x08\x83$DFHa\xfa\x04\t\x88O\xf8\x80\xc3)\xd3\\\x06\xe5\xa8v'
 b")c\x05\x8e\xc1\xddjI'\x80Z\xdc\xa7z\x03\xec\xc2\x91\x1e\x91!h\xa0r"
 b'\xe2"\xa3\xb4\xa4\xf6&q$\xd1<\xd0\x18\x1b\x11]%\x18\xdfO\xce\x9fzN\xf6\xf8jC'
 b"\xb1\t\x15$\x90'Q\xeb\x92[\xbeJ\xae\xe3 F\xdc'\x8au\xc9\xbbtV,\xd8\x8b\xa6"
 b'\x8d\xf4W\x9c\xaf\x85\xa3\xa8t ,\x8a\xb2\x900\xc8\x1e\x1cW\xcb\x95\x9br)'
 b'\x03\x8c\x83\xd4\xe2\xb9u\xad\xc7\x96\xec\xa5\xf4N\xf4n\xb50_a'
 b'\x00\xe2\xae\xe7l\xde\xc1J\xf4R}\xd3/\x81\\&\x98\xc4\xa8{a\xff\xb2:'
 b"\xf6\xbb\xc5V\xd8f\xcdc\xdb\x98\xea\xcaI\x8d|I\x12\x01\\\xd9\xae'\x18-"
 b'+M\xf2\xa1\r\x91\xff\xef\x8e\xdb\xe4\xa6f\xcb\xe3\x00\xc3\xde\x81\xfd'
 b'\xb2\xdb}\x11#\x1a\x0b\xd1\xbf\xb5(\x01\xbb\xb1\xc9\xc50\x8b\xec?'
 b't\xeb\xb1\x8eM\xc1\x92\xe9\x8em>wF\xb4\x92@k\xed\xa0~p[\xd6\x87'
 b'\x07\xba\xe5\x1a\xbfb\xab\xad\xd1R\xdaN\xea\x08\n\xf1\x7f\x11\x90\xed'
 b'\x1d\xcaeBxi\x08Q\x8aD\x97\x1a\xf0^\xe1.j\x9fX\xd5\x1a\xdf\xa8\xd2\x13\x1fTU'
 b'\xe9\xfb\xa4\x84o\xf6664#\xa2\xd4\xeaWR\xceg;\xe9\x194;\xfe\xe7\xaf\xf7[\xfb'
 b'\x12wK\xee\x17\xc6\xeb/\x86\x83\x9c\x812)\x93\\\x08\xa3\xf1S\xae\x8ekf'
 b'\xf7\xa4\xb8\xd5\x0cE2\xfaa\xc4x\xe1[\\SZ\x9b\xdf#\x04L(g\x1a\xca\xcd\x9ay'
 b'2\xda\x11I\xb0\xc1\x19\x0f@x\x8e\xc8@x\xe9/\xf1\x8a\xf9\xb2RZ\x04\xd1'
 b'\xea\xf9\nW\x1e\xaa\x06br\xa2\x15a\x045k\x8b\xd5%\xe02\x16a\x1c/'
 b'\xcc\x88\xd2\xf5\x15p\xf8Y\x90\xedlaV\x9c\x80\xd1\xee\xeazk,\x9b\xe7\xcb'
 b'm\x9f`\x1a}\xcal\x1a\x1f\xc9\xd9\xe8/c\xb0\xcd\xf8\\\xd9\xd0\x87\x02\x80 '
 b'Bf\x95\xbd:\xcb\x08}G\xc6\x968\xa8e\x18\xa1r\xd6\x13\xaa$\xed\xcd\xb1'
 b'\xc5\x00\xb5\xd1\xc2\xf1Z\xad\xfb\xc1xT\xad\xb2%\xf2\xb5Z\x03\x1aWt\t\x17'
 b"\xcb\x96\xd0'it\x18\xed(9\xfc\xe2y\xd7\xd2\xa2\xa0\x19\x13\xa9W\x93\xd1\xde"
 b'\x7f\x90\xd6\xec\r\x07\xe1\ryA\xb9Zo\x00}\x9f\x83)\x06sY\xc6\x8670W\x9a4'
 b'\xb5\xebj`\xfb\xfd9\xcdFiI\xf5\xb7\xce\x95\xd5\xa9\xa0\xc5#\xc6z\xf6o'
 b'\x05\x0c)\xd1\xcd\x1b\x17\xac\x82~L\xeb\x15\x11\x07\xd1"\x82\xa6\x7f'
 b"\x88\xe2\xf2xV\x8cR\x92N\x83D\x02\xd2'\xe9\xdd\xda\x14\xe9\x80"
 b'\xa6\xe7\xac\xf4\x97\x82\xc5\xb3\xb4\xb4I?5x\n>7\xba_62\x039%vcLKT\xcc\xfd-'
 b'\t\x98\x99\x82-\rM2]\xd0\xfb\x98k\r\x15\xad\xbcT\xd61H4\xbam\xc1:B\x0c'
 b'\xad4:I\xc3\xf3\r2\x1f\x03\xb49)X\x1f\xc4\xe63\x16\xb7\xfe\xb2\x10\xe8'
 b'\xf3\x05\xc7\xb5\xde9\x0f\x80n\x12!\x13\xfb\xd4c\xdfx6\x0b"_\xfcwX'
 b'\xf5\xa3\x87\x0e\xf1\xd5\xba\x92-P\x85\xbd\x14d\x18P\xc9\xbcd\x00\xf7\xa28h'
 b'\xb3\xbc:b\xb6\x9by#\xd9O4\x08\x88\xfb\xfa\xa7\x0b<\xc7h\xaf\xeaQ\xdf'
 b'\xccK\xfc\xdf\xd6\xe6\xd7\xf8\xcd\xb1o\x89\xe6\xf4\xc4\xf6ZN\xa2\xca!^\x14w'
 b'\x1c\x0bK|\xde\x1b\x15\xed\xc4\xc6\x01\xdf\xf3Y\xbabJ|\xb205H\x0cb\xcaq.l'
 b"\xd3\xcc\xff\xc4';c8X\xb4a&\xbf\xcdtE\xa7\x15\xe5\xcd\xeeb{\xec\x0cg\x03\x8a"
 b'\x99\xccd\xd0\xc2\xc4\xd7\x96\xfd\xcfD;-\x94\xe1?\x01\x88\x9e\xe0'
 b'\xb9\x02\x19I\xac\xd6\x92\x13\xdf\x86\xee\x19\xea\t\x1e;\xf9\xd5|\xaa'
 b'\xfd,j\x04\xe5\x88\xd4\xee\xe3\xe2\n\x86\xde\xf6\xf6P\xa8\xeb\x7f\xf2'
 b'\xa2\xe19\x15M\x81\xd9\x8dwmC\xfe|\nj2\xe1\x9a>\xbc\x0c\x1d+yK\xd9\xab\xfe'
 b'\xb3\x12\x90q:\xab\x9a\x14\xeb\xdd\xb4W\xe0V\x83\xef\xb4\x0e\xf6\x18'
 b'\x9f\xae\xa2\xed\xb8\x9c\xa9\xd6x\xb9\xfc\xd7I\x03\xb2\xa7\xdb8b\xe4'
 b'\xd3\t\xddN\xed\xec\xf9\xafB\x1fe\xce\xbe\x99\xc85\r;7\xef\xc3g\x9fD'
 b'\xe2\xb1\xf8\xbb#\xfa\r!8\xc5=(\x06\xbf\xb3\xbc\x99\x9b\xa9\xba'
 b'\x99\x0b\x96\xed?\xcf\xdb~\xc8u\xcd\x8e@)\xac5r\x12\x99\x8c\xd5\x10\x1f\x12'
 b'|v\xd2QJ\xb8\xb0G\xbb-3jcV\xd1\xf6\xad\xc1M\x00\x89\xdf\xbe\x1e[!.\xe9'
 b'\xf01[\xae\xefB(7\x1694Hj\xd3XW^+\x7f\xac\xad\xea\x82V&\xa0Y\xcd'
 b'h\xbf\x8c\xeb\xa8\xba[SK\x18!\xbb,\x96p\xdaC\xe9\xdbU\x95\x99U\nua+\n'
 b"\x83\xc9\xd6>yL&n\x89\xc5b^\x96G3\x7f5a\x89np'5\x99\xf7S\x85\x88*\xb2ND"
 b'\xe4\xc5\xb5\xbe\xe4\x83\xd9\xb7\x98}\x8f\x7f_+^\x92\x9a3\x81)\x0f\x9d;\xa6'
 b'\x11\x11\xd1k^|\xf9_\xd4\xd9x\x1f\xf2\xd1V\xbd\x95:\xdd\x10\xa1`\x8bO'
 b'8\x07[\x86\xc1*\x80V\xcf\xcd\x08g\xcc\xbb\xac\xb5q3\x93Z\xe4G_\xf6\xe2B`\xc4'
 b"\xcc\xef\x9d(\xf5aM\xd8\x99+\x85\x14\xdd\x10\xe4'\xdbT\xe8V\x8b0\xd3;"
 b'\xd8\xb3|\x94\xf0C"\xe5X)\xcaL\x0c\x0bned\xb6\xcc\xbf\xd7NQ\xf1_\x88\x18Z'
 b'OSx\xd2\xb5\xf4;\xfe\x18\xdd~k\x9abRe\xf0\xfbs\xd7\x9e\xfd\xcaN\xcc\xb4\x03L'
 b'\xa9\x86\xd8\xa8\xac\xae\x8c6w2A\x19\x1fv\x80\xb3\x027\xd3:h\x98\xd9\xcf'
 b'A\x1e\xcc#\xedE\x94\xb8\xe0Y\x8c\x89\x15\xb2\xaf\x95!h\x19\x8f\xb3=S\x8e'
 b'\xb5\x14\x8d\xd6L-E\xb7N\x92\xb7\xc2\x16\xb3\ts\xea\x9es[\x8a\x81b\xcb'
 b'\x94\x12[\xa3\xf0\x04\x1c\x92\xb2"k\xf4\xcf\xa4\x10\x90\xe6\x99\x1e\xae'
 b'\'gA\xca\xfe~3\x06\\`\xe9\xd3\xf5"\xbc\x89\x1a\xff/\x17X\xfd\xdb\xc7'
 b'\xfe\xbe0\xdd\xf9-p\xcfu\x0e`\xa3-*z\x17ZL6\xcdS\xbb:\x00\xbd\xecN\x80'
 b'{lQ\x08\xe8\x92\x15\xef\x8a9w\x89\xaed\xa7~]{I\x02\x11\xab\xb1\x1a/\xafc\x03'
 b"\xe1\xb0}\xf1y\xa4\x1dcg\xd3\xacsi\x99\xf1<\xdd\xb6\xeeq\xf4\x03\xfe9'R\xeb."
 b'`\xe8\r"DB\xff\xae:hbV\x15i=\xad\xa1H\x1f\xc0\xa6c\x9921\xf8\x98\x1d'
 b'\x03y\xa89K\xd4\x88B\xf3\xce\xe1\xed\xe3\xb6\x80\xfa\x1a\x03\xf7sc86`CC\x14x'
 b'\x95\xf04\xd5\xfb\\"V\xa7\xa5Q\xed\xf1\x99\xf5\x9cC\xa6\xa0o\x95K\x98s'
 b'g>\xd6\xcd\x8a\xca\x17R\xa9c\x95\xf48\xb10>I!P9\xe8\x02L\x84\xf8\xb3\xc3\x88'
 b'\x8d3\x81#\x1d\xdb\xc5M\xde\x92\rO\x14\xafh\x04\x8e\x8d\x16\xdd'
 b'\xad\xd9\xc4\x925\xdf\x0e6k\x9b\xb3\x7f\x19\x95J\x14\x0f\xd3\x00\x16'
 b'\xb8\xa7/H;k\xb5kf\xa2\x8e\x8f\xd1\xec\xb8\x1a.\xaeI=\x19\xee.B=.\xe2\xa6'
 b'\xe7#i\xaaZ\xe8\xbb\x80(|\x85\x0e\xd4\x0e\xe0yd\xe7\x01\xc7m\x92\x1a\xf0'
 b'\xcdF\xa2\x8f\x8byz?\x04m\xe3\xfa$\xe0\xb0(\xc3\x1d\xe0\xae\xb0\\\x8d\xe2'
 b'fH\xea\x11\xd0:\xc2\xc8\xa4~g}\x95\xf4\xf0\x90\xeb$\xc4\x0bg\x80\x87\xe3`]wr'
 b'HH\x1b\xb5LN\xc4S\xa6\x8dt\xa0\x96\x98\xc4\xee\x9b\x8f\x87\xa55\x8d\xa9\xbd'
 b'f\x13A\xa0r\xaf\x8c\xbfoY\x95\x92\xcb\x19\x12Yy\x90\xe3#X\x86T\xf3h\x08\x02x'
 b'\xb3\x15\x9ba7\xc3FRJb\xc6\x01`\x19\xf9\x942\r\xb4\xd2\x9b\x98\x96_'
 b'\xe5k\xc2k\xedD\xa5V?\xaf\xe9\x8fV/\ni\x8ew\xa3\x052\xd9\x1a\x98'
 b'A\xd4\xe9\xefx\xa7\x89\x90\xc5\x9e\x7f\xdf\xbe\xef\xc8\xc5\xd4U\xd0\xc1'
 b'd\x97s\x82\xe0^\xfa\x9eIw\xc4\r5\\*t\xf6fP\xdd\xd7j\x86\x03\x18)/\x87\tWVs'
 b'\x90\xb6\xec\xef\\\xd9\x18\xad]\xc6{\n\x06\x07+- $\x16\x1b>\xab\xdb\xa3N_h '
 b'\xf0u/\xf56a\xa6X\xffG\xb6\x9f\x9a*\xd1\x1c!\xeb\x81L\xce\xa8\xdbN'
 b'\x98\x9bX\x0c\xf40MG\\w\r\xf9\x10Z~\xb3\xd8or\x8e\xd6\xe9\x92\x95'
 b'\xcd_\xbf\x9f\xcahA\xaf\xc9\xd2\xc4LS\x80\x0bW\x95Hv\x9d')


# TODO: Do the same for Lattice and Duplicate
# TODO: Write test to check after signing (before is there)
# TODO: Fix problems with verifications (positive and negative checks)
# TODO: Check corner cases, parameter boundaries

wrap_message_expected1 = bytearray(b'\xff\x00\x0000000027\x00{"data": 12345, "type": "TESTKEY_1234"}\x00\x00\xff')
wrap_message_expected1b = bytearray(b'\xff\x00\x0000000027\x00{"type": "TESTKEY_1234", "data": 12345}\x00\x00\xff')


class TestSimpleTransaction(TestCase):

    def __init__(self, *args, **kwargs):
        super(TestSimpleTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):
        # Alice sending coins to Bob
        tx = TransferTransaction.create(addr_to=self.bob.get_address(),
                                        amount=100,
                                        fee=1,
                                        xmss_pk=self.alice.pk())
        self.assertTrue(tx)

    def test_create_negative_amount(self):
        with self.assertRaises(ValueError):
            TransferTransaction.create(addr_to=self.bob.get_address(),
                                       amount=-100,
                                       fee=1,
                                       xmss_pk=self.alice.pk())

    def test_create_negative_fee(self):
        with self.assertRaises(ValueError):
            TransferTransaction.create(addr_to=self.bob.get_address(),
                                       amount=-100,
                                       fee=-1,
                                       xmss_pk=self.alice.pk())

    def test_to_json(self):
        tx = TransferTransaction.create(addr_to=self.bob.get_address(),
                                        amount=100,
                                        fee=1,
                                        xmss_pk=self.alice.pk())
        txjson = tx.to_json()

        self.assertEqual(json.loads(test_json_Simple), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_Simple)
        tx.sign(self.alice)
        self.assertIsInstance(tx, TransferTransaction)
        self.assertEqual(tx.subtype, qrl_pb2.Transaction.TRANSFER)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual('da721268357a4b1d9642b6041f9884701e053b69af4ad893ce6816cbaee830d5', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_Simple, tx.signature)

        # Test that specific content was copied over.
        self.assertEqual(b'Qfd5d64455903b8e500a14cafb1c4ea95a1f97562aaaa24d83e5b9dc3861a47386ce9ad15', tx.txto)
        self.assertEqual(100, tx.amount)
        self.assertEqual(1, tx.fee)

    def test_validate_tx(self):
        # If we change amount, fee, txfrom, txto, (maybe include xmss stuff) txhash should change.
        tx = TransferTransaction.create(addr_to=self.bob.get_address(),
                                        amount=100,
                                        fee=1,
                                        xmss_pk=self.alice.pk())

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We have not touched the tx: validation should pass.
        self.assertTrue(tx.validate_or_raise())

    def test_state_validate_tx(self):
        # Test balance not enough
        # Test negative tx amounts
        pass


class TestStakeTransaction(TestCase):
    def __init__(self, *args, **kwargs):
        super(TestStakeTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))
        self.assertTrue(tx)

    def test_to_json(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))
        txjson = tx.to_json()
        self.assertEqual(json.loads(test_json_Stake), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_Stake)
        tx.sign(self.alice)
        self.assertIsInstance(tx, StakeTransaction)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual('ace9a9f963356730ba631c56ab2dc2711ff2f3321ca4e9326dda00923410df17', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_Stake, tx.signature)

        # Test that specific content was copied over.
        self.assertEqual(2, tx.activation_blocknumber)
        self.assertEqual('380793debf8f72e70ef7351ee5005df6c7ca2320ff49e0ead0c40b19c7bb1cc1'
                         '496e19a482c06350bdc054e4ed52a24ec8c994c44f9341d01190a81ab093ade8',
                         bin2hstr(tx.slave_public_key))
        self.assertEqual('1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8',
                         bin2hstr(tx.hash))

    def test_validate_tx(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We haven't touched the tx: validation should pass
        self.assertTrue(tx.validate_or_raise())

    def test_get_message_hash(self):
        tx = StakeTransaction.create(activation_blocknumber=2,
                                     xmss=self.alice,
                                     slavePK=self.bob.pk(),
                                     hashchain_terminator=sha256(b'T1'))

        # Currently, a Transaction's message is always blank (what is it used for?)
        self.assertEqual('a74b31c640968132afdf274346e7f41e836cc5dedbe9bf428315469b408ff872',
                         bin2hstr(tuple(tx.get_message_hash())))


class TestCoinBase(TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCoinBase, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.alice.set_index(11)

        self.mock_blockheader = Mock(spec=BlockHeader)
        self.mock_blockheader.stake_selector = self.alice.get_address()
        self.mock_blockheader.block_reward = 50
        self.mock_blockheader.fee_reward = 40
        self.mock_blockheader.prev_blockheaderhash = sha256(b'prev_headerhash')
        self.mock_blockheader.block_number = 1
        self.mock_blockheader.headerhash = sha256(b'headerhash')

        self.maxDiff = None

    def test_create(self):
        tx = CoinBase.create(self.mock_blockheader, self.alice)
        self.assertIsInstance(tx, CoinBase)

    def test_to_json(self):
        tx = CoinBase.create(self.mock_blockheader, self.alice)
        txjson = tx.to_json()
        print(txjson)
        self.assertEqual(json.loads(test_json_CoinBase), json.loads(txjson))

    def test_from_txdict(self):
        tx = CoinBase.create(self.mock_blockheader, self.alice)
        tx.sign(self.alice)
        self.assertIsInstance(tx, CoinBase)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(11, tx.ots_key)
        self.assertEqual(test_signature_CoinBase, tx.signature)

        self.assertEqual('b9315e16cb82a513a9507251e3f416ecc16fde4fe2f2087cb29ccc5fd5ac43db', bin2hstr(tx.txhash))

        # Test that specific content was copied over.
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txto)
        self.assertEqual(tx.amount, 90)


class TestVote(TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVote, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.alice.set_index(11)

        self.addr_from = self.alice.get_address()
        self.blocknumber = 10
        self.headerhash = sha256(b'headerhash')

        self.maxDiff = None

    def test_create(self):
        tx = Vote.create(self.addr_from, self.blocknumber, self.headerhash, self.alice)
        self.assertIsInstance(tx, Vote)

    def test_to_json(self):
        tx = Vote.create(self.addr_from, self.blocknumber, self.headerhash, self.alice)
        txjson = tx.to_json()
        print(txjson)
        self.assertEqual(json.loads(test_json_Vote), json.loads(txjson))

    def test_from_txdict(self):
        tx = Vote.create(self.addr_from, self.blocknumber, self.headerhash, self.alice)
        tx.sign(self.alice)
        self.assertIsInstance(tx, Vote)

        # Test that common Transaction components were copied over.
        self.assertEqual(0, tx.nonce)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(11, tx.ots_key)
        self.assertEqual(test_signature_Vote, tx.signature)

        self.assertEqual('5720505f1ee7b9570e48d432263757b4e50597ee8f3e7331c612ff229ea1f334', bin2hstr(tx.txhash))


class TestTokenTransaction(TestCase):

    def __init__(self, *args, **kwargs):
        super(TestTokenTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):
        # Alice creates Token
        initial_balances = list()
        initial_balances.append(qrl_pb2.AddressAmount(address=self.alice.get_address(),
                                                      amount=400000000))
        initial_balances.append(qrl_pb2.AddressAmount(address=self.bob.get_address(),
                                                      amount=200000000))
        tx = TokenTransaction.create(addr_from=self.alice.get_address(),
                                     symbol=b'QRL',
                                     name=b'Quantum Resistant Ledger',
                                     owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                     decimals=4,
                                     initial_balances=initial_balances,
                                     fee=1,
                                     xmss_pk=self.alice.pk())
        self.assertTrue(tx)

    def test_create_negative_fee(self):
        with self.assertRaises(ValueError):
            TokenTransaction.create(addr_from=self.alice.get_address(),
                                    symbol=b'QRL',
                                    name=b'Quantum Resistant Ledger',
                                    owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                    decimals=4,
                                    initial_balances=[],
                                    fee=-1,
                                    xmss_pk=self.alice.pk())

    def test_to_json(self):
        initial_balances = list()
        initial_balances.append(qrl_pb2.AddressAmount(address=self.alice.get_address(),
                                                      amount=400000000))
        initial_balances.append(qrl_pb2.AddressAmount(address=self.bob.get_address(),
                                                      amount=200000000))
        tx = TokenTransaction.create(addr_from=self.alice.get_address(),
                                     symbol=b'QRL',
                                     name=b'Quantum Resistant Ledger',
                                     owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                     decimals=4,
                                     initial_balances=initial_balances,
                                     fee=1,
                                     xmss_pk=self.alice.pk())
        txjson = tx.to_json()

        self.assertEqual(json.loads(test_json_Token), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_Token)
        tx.sign(self.alice)
        self.assertIsInstance(tx, TokenTransaction)
        self.assertEqual(tx.subtype, qrl_pb2.Transaction.TOKEN)

        # Test that common Transaction components were copied over.
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(b'QRL', tx.symbol)
        self.assertEqual(b'Quantum Resistant Ledger', tx.name)
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.owner)
        self.assertEqual('968a2957fee11ceb264a5f4eac58c5f2b8e91399dffbcd2017999ac5e44f39df', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_Token, tx.signature)

        total_supply = 0
        for initial_balance in tx.initial_balances:
            total_supply += initial_balance.amount
        self.assertEqual(600000000, total_supply)

        self.assertEqual(1, tx.fee)

    def test_validate_tx(self):
        initial_balances = list()
        initial_balances.append(qrl_pb2.AddressAmount(address=self.alice.get_address(),
                                                      amount=400000000))
        initial_balances.append(qrl_pb2.AddressAmount(address=self.bob.get_address(),
                                                      amount=200000000))
        tx = TokenTransaction.create(addr_from=self.alice.get_address(),
                                     symbol=b'QRL',
                                     name=b'Quantum Resistant Ledger',
                                     owner=b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2',
                                     decimals=4,
                                     initial_balances=initial_balances,
                                     fee=1,
                                     xmss_pk=self.alice.pk())

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We have not touched the tx: validation should pass.
        self.assertTrue(tx.validate_or_raise())

    def test_state_validate_tx(self):
        # Test balance not enough
        # Test negative tx amounts
        pass


class TestTransferTokenTransaction(TestCase):

    def __init__(self, *args, **kwargs):
        super(TestTransferTokenTransaction, self).__init__(*args, **kwargs)
        self.alice = XMSS(4, seed='a' * 48)
        self.bob = XMSS(4, seed='b' * 48)

        self.alice.set_index(10)
        self.maxDiff = None

    def test_create(self):

        tx = TransferTokenTransaction.create(addr_from=self.alice.get_address(),
                                             token_txhash=b'000000000000000',
                                             addr_to=self.bob.get_address(),
                                             amount=200000,
                                             fee=1,
                                             xmss_pk=self.alice.pk())
        self.assertTrue(tx)

    def test_to_json(self):
        tx = TransferTokenTransaction.create(addr_from=self.alice.get_address(),
                                             token_txhash=b'000000000000000',
                                             addr_to=self.bob.get_address(),
                                             amount=200000,
                                             fee=1,
                                             xmss_pk=self.alice.pk())
        txjson = tx.to_json()

        self.assertEqual(json.loads(test_json_TransferToken), json.loads(txjson))

    def test_from_json(self):
        tx = Transaction.from_json(test_json_TransferToken)
        tx.sign(self.alice)

        self.assertIsInstance(tx, TransferTokenTransaction)
        self.assertEqual(tx.subtype, qrl_pb2.Transaction.TRANSFERTOKEN)

        # Test that common Transaction components were copied over.
        self.assertEqual(b'Q223bc5e5b78edfd778b1bf72702061cc053010711ffeefb9d969318be5d7b86b021b73c2', tx.txfrom)
        self.assertEqual('3c523f9cc26f800863c003524392806ff6df373acb4d47cc607b62365fe4ab77'
                         'cf3018d321df7dcb653c9f7968673e43d12cc26e3461b5f425fd5d977400fea5',
                         bin2hstr(tx.PK))
        self.assertEqual(b'000000000000000', tx.token_txhash)
        self.assertEqual(200000, tx.amount)
        self.assertEqual('361266c5011b5cc3ea184bb7bc9e9b6c25fc48f58764dba8c209b6fb2a681e50', bin2hstr(tx.txhash))
        self.assertEqual(10, tx.ots_key)
        self.assertEqual(test_signature_TransferToken, tx.signature)

        self.assertEqual(1, tx.fee)

    def test_validate_tx(self):
        tx = TransferTokenTransaction.create(addr_from=self.alice.get_address(),
                                             token_txhash=b'000000000000000',
                                             addr_to=self.bob.get_address(),
                                             amount=200000,
                                             fee=1,
                                             xmss_pk=self.alice.pk())

        # We must sign the tx before validation will work.
        tx.sign(self.alice)

        # We have not touched the tx: validation should pass.
        self.assertTrue(tx.validate_or_raise())

    def test_state_validate_tx(self):
        # Test balance not enough
        # Test negative tx amounts
        pass
